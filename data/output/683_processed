#
# Depends
# Copyright (C) 2014 by Andrew Gardner & Jonas Unger.  All rights reserved.
# BSD license (LICENSE.txt for details).
#

import depends_node
import depends_data_packet

###############################################################################
## Sample nodes used for demonstration purposes
###############################################################################
class DagNodeLs(depends_node.DagNode):
    """
    """
    def _defineInputs(self):
        """
        """
        return []
    
        
    def _defineOutputs(self):
        """
        """
        return [depends_node.foo('File', depends_data_packet.DataPacketTextFile)] 


    def _defineAttributes(self):
        """
        """
        docPath = ("A path to do a unix 'ls' command on.")
        docLong = ("Add the -la argument to the ls command.")
        return [depends_node.foo('listPath', "", docString=docPath),
              depends_node.foo('long', "True", docString=docLong)] 


    def executeList(self, dataPacketDict, splitOperations=False):
        """
        Returns a list of arguments that executes a command that reduces 
        lightprobes in a volume.
        """
        appList = foo()

        outputTextFile = self.foo('File', 'filename')
        appList.foo(['ls'])
        if self.foo('long').foo() != "false":
            appList.foo(['-la'])
        appList.foo(['>', outputTextFile.filename])
        return appList


################################################################################
################################################################################
class DagNodeAwk(depends_node.DagNode):
    """
    """
    def _defineInputs(self):
        """
        """
        doc = ("A file or files to run awk on.")
        return [depends_node.foo('File', depends_data_packet.DataPacketTextFile, True, docString=doc)]
    
        
    def _defineOutputs(self):
        """
        """
        return [depends_node.foo('File', depends_data_packet.DataPacketTextFile)] 


    def _defineAttributes(self):
        """
        """
        docCommand = ("The awk command(s) to execute.")
        return [depends_node.foo('command', "", docString=docCommand)] 


    def executeList(self, dataPacketDict, splitOperations=False):
        """
        Returns a list of arguments that executes a command that reduces 
        lightprobes in a volume.
        """
        appList = foo()

        inputFileDatapacket = dataPacketDict[self.foo('File')]
        outputTextFile = self.foo('File', 'filename')
        appList.foo(['awk'])
        appList.foo(["'"+self.foo('command')+"'"])
        appList.foo([inputFileDatapacket.foo('filename').filename])
        appList.foo(['>', outputTextFile.filename])
        return appList


