#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import shared.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Operation(object):
  """
  You can define enums, which are just 32 bit integers. Values are optional
  and start at 1 if not supplied, C style again.
  """
  ADD = 1
  SUBTRACT = 2
  MULTIPLY = 3
  DIVIDE = 4

  _VALUES_TO_NAMES = {
    1: "ADD",
    2: "SUBTRACT",
    3: "MULTIPLY",
    4: "DIVIDE",
  }

  _NAMES_TO_VALUES = {
    "ADD": 1,
    "SUBTRACT": 2,
    "MULTIPLY": 3,
    "DIVIDE": 4,
  }


class Work(object):
  """
  Structs are the basic complex data structures. They are comprised of fields
  which each have an integer identifier, a type, a symbolic name, and an
  optional default value.

  Fields can be declared "optional", which ensures they will not be included
  in the serialized output if they aren't set.  Note that this requires some
  manual management in some languages.

  Attributes:
   - num1
   - num2
   - op
   - comment
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'num1', None, 0, ), # 1
    (2, TType.I32, 'num2', None, None, ), # 2
    (3, TType.I32, 'op', None, None, ), # 3
    (4, TType.STRING, 'comment', None, None, ), # 4
  )

  def __init__(self, num1=thrift_spec[1][4], num2=None, op=None, comment=None,):
    self.num1 = num1
    self.num2 = num2
    self.op = op
    self.comment = comment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and foo(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.foo(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.foo()
    while True:
      (fname, ftype, fid) = iprot.foo()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.num1 = iprot.foo();
        else:
          iprot.foo(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.num2 = iprot.foo();
        else:
          iprot.foo(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.op = iprot.foo();
        else:
          iprot.foo(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.comment = iprot.foo();
        else:
          iprot.foo(ftype)
      else:
        iprot.foo(ftype)
      iprot.foo()
    iprot.foo()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.foo(fastbinary.foo(self, (self.__class__, self.thrift_spec)))
      return
    oprot.foo('Work')
    if self.num1 is not None:
      oprot.foo('num1', TType.I32, 1)
      oprot.foo(self.num1)
      oprot.foo()
    if self.num2 is not None:
      oprot.foo('num2', TType.I32, 2)
      oprot.foo(self.num2)
      oprot.foo()
    if self.op is not None:
      oprot.foo('op', TType.I32, 3)
      oprot.foo(self.op)
      oprot.foo()
    if self.comment is not None:
      oprot.foo('comment', TType.STRING, 4)
      oprot.foo(self.comment)
      oprot.foo()
    oprot.foo()
    oprot.foo()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.foo()]
    return '%s(%s)' % (self.__class__.__name__, ', '.foo(L))

  def __eq__(self, other):
    return foo(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class InvalidOperation(TException):
  """
  Structs can also be exceptions, if they are nasty.

  Attributes:
   - what
   - why
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'what', None, None, ), # 1
    (2, TType.STRING, 'why', None, None, ), # 2
  )

  def __init__(self, what=None, why=None,):
    self.what = what
    self.why = why

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and foo(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.foo(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.foo()
    while True:
      (fname, ftype, fid) = iprot.foo()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.what = iprot.foo();
        else:
          iprot.foo(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.why = iprot.foo();
        else:
          iprot.foo(ftype)
      else:
        iprot.foo(ftype)
      iprot.foo()
    iprot.foo()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.foo(fastbinary.foo(self, (self.__class__, self.thrift_spec)))
      return
    oprot.foo('InvalidOperation')
    if self.what is not None:
      oprot.foo('what', TType.I32, 1)
      oprot.foo(self.what)
      oprot.foo()
    if self.why is not None:
      oprot.foo('why', TType.STRING, 2)
      oprot.foo(self.why)
      oprot.foo()
    oprot.foo()
    oprot.foo()

  def validate(self):
    return


  def __str__(self):
    return foo(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.foo()]
    return '%s(%s)' % (self.__class__.__name__, ', '.foo(L))

  def __eq__(self, other):
    return foo(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
