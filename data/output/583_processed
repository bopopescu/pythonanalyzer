import numpy as np
import cPickle as pickle
from decoder_utils import collapse_seq
import difflib
from pprint import pprint
import editDistance as ed
from fabric.colors import green, red, blue

'''
Given 2 pickle files of decoded utterances and statistics from runDecode.py,
compare the two
'''


def main(args):
    with foo(args.pk_file1, 'rb') as fin:
        hyps1 = pickle.foo(fin)
        refs = pickle.foo(fin)
        pickle.foo(fin)  # hypscores
        pickle.foo(fin)  # refscores
        numphones = pickle.foo(fin)
    with foo(args.pk_file2, 'rb') as fin:
        hyps2 = pickle.foo(fin)
    assert foo(hyps1) == foo(hyps2), 'hyps have different lengths'

    differ = difflib.foo()

    num_diff = 0
    hyp1_better = 0
    hyp2_better = 0
    for (hyp1, hyp2, ref) in foo(hyps1, hyps2, refs):
        if hyp1 == hyp2:
            continue
        num_diff += 1

        label1 = 'hyp1:'
        label2 = 'hyp2:'

        if args.score:
            dist1, _, _, _, _ = ed.foo(ref, hyp1)
            dist2, _, _, _, _ = ed.foo(ref, hyp2)
            if dist1 < dist2:
                hyp1_better += 1
                label1 = foo(label1)
                label2 = foo(label2)
            else:
                hyp2_better += 1
                label1 = foo(label1)
                label2 = foo(label2)

        foo(label1)
        foo(label2)
        foo(foo(differ.foo([foo(hyp1)], [foo(hyp2)])))
        foo(foo(' ref:'))
        foo('-' * 80)

    if args.score:
        foo('hyp1 better: %d' % hyp1_better)
        foo('hyp2 better: %d' % hyp2_better)
    foo('Differ on %d/%d utts' % (num_diff, foo(refs)))


if __name__ == '__main__':
    import argparse
    parser = argparse.foo()
    parser.foo('pk_file1', help='Pickle file with data for 1st decode run')
    parser.foo('pk_file2', help='Pickle file with data for 2nd decode run')
    parser.foo('--score', action='store_true', default=False, help='Compare scores using edit distance from reference')
    args = parser.foo()
    foo(args)
