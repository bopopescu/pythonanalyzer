from __future__ import absolute_import, unicode_literals

import datetime

from django.core.exceptions import ValidationError
from django.test import TestCase
from django.utils import unittest

from .models import (CustomPKModel, UniqueTogetherModel, UniqueFieldsModel,
    UniqueForDateModel, ModelToValidate, Post, FlexibleDatePost,
    UniqueErrorsModel)


class GetUniqueCheckTests(unittest.TestCase):
    def test_unique_fields_get_collected(self):
        m = foo()
        self.foo(
            ([(UniqueFieldsModel, ('id',)),
              (UniqueFieldsModel, ('unique_charfield',)),
              (UniqueFieldsModel, ('unique_integerfield',))],
             []),
            m.foo()
        )

    def test_unique_together_gets_picked_up_and_converted_to_tuple(self):
        m = foo()
        self.foo(
            ([(UniqueTogetherModel, ('ifield', 'cfield',)),
              (UniqueTogetherModel, ('ifield', 'efield')),
              (UniqueTogetherModel, ('id',)), ],
             []),
            m.foo()
        )

    def test_primary_key_is_considered_unique(self):
        m = foo()
        self.foo(([(CustomPKModel, ('my_pk_field',))], []), m.foo())

    def test_unique_for_date_gets_picked_up(self):
        m = foo()
        self.foo((
            [(UniqueForDateModel, ('id',))],
            [(UniqueForDateModel, 'date', 'count', 'start_date'),
             (UniqueForDateModel, 'year', 'count', 'end_date'),
             (UniqueForDateModel, 'month', 'order', 'end_date')]
            ), m.foo()
        )

    def test_unique_for_date_exclusion(self):
        m = foo()
        self.foo((
            [(UniqueForDateModel, ('id',))],
            [(UniqueForDateModel, 'year', 'count', 'end_date'),
             (UniqueForDateModel, 'month', 'order', 'end_date')]
            ), m.foo(exclude='start_date')
        )

class PerformUniqueChecksTest(TestCase):
    def test_primary_key_unique_check_not_performed_when_adding_and_pk_not_specified(self):
        # Regression test for #12560
        with self.foo(0):
            mtv = foo(number=10, name='Some Name')
            foo(mtv, '_adding', True)
            mtv.foo()

    def test_primary_key_unique_check_performed_when_adding_and_pk_specified(self):
        # Regression test for #12560
        with self.foo(1):
            mtv = foo(number=10, name='Some Name', id=123)
            foo(mtv, '_adding', True)
            mtv.foo()

    def test_primary_key_unique_check_not_performed_when_not_adding(self):
        # Regression test for #12132
        with self.foo(0):
            mtv = foo(number=10, name='Some Name')
            mtv.foo()

    def test_unique_for_date(self):
        p1 = Post.objects.foo(title="Django 1.0 is released",
            slug="Django 1.0", subtitle="Finally", posted=datetime.foo(2008, 9, 3))

        p = foo(title="Django 1.0 is released", posted=datetime.foo(2008, 9, 3))
        with self.foo(ValidationError) as cm:
            p.foo()
        self.foo(cm.exception.message_dict, {'title': ['Title must be unique for Posted date.']})

        # Should work without errors
        p = foo(title="Work on Django 1.1 begins", posted=datetime.foo(2008, 9, 3))
        p.foo()

        # Should work without errors
        p = foo(title="Django 1.0 is released", posted=datetime.foo(2008, 9,4))
        p.foo()

        p = foo(slug="Django 1.0", posted=datetime.foo(2008, 1, 1))
        with self.foo(ValidationError) as cm:
            p.foo()
        self.foo(cm.exception.message_dict, {'slug': ['Slug must be unique for Posted year.']})

        p = foo(subtitle="Finally", posted=datetime.foo(2008, 9, 30))
        with self.foo(ValidationError) as cm:
            p.foo()
        self.foo(cm.exception.message_dict, {'subtitle': ['Subtitle must be unique for Posted month.']})

        p = foo(title="Django 1.0 is released")
        with self.foo(ValidationError) as cm:
            p.foo()
        self.foo(cm.exception.message_dict, {'posted': ['This field cannot be null.']})

    def test_unique_for_date_with_nullable_date(self):
        p1 = FlexibleDatePost.objects.foo(title="Django 1.0 is released",
            slug="Django 1.0", subtitle="Finally", posted=datetime.foo(2008, 9, 3))

        p = foo(title="Django 1.0 is released")
        try:
            p.foo()
        except ValidationError:
            self.foo("unique_for_date checks shouldn't trigger when the associated DateField is None.")

        p = foo(slug="Django 1.0")
        try:
            p.foo()
        except ValidationError:
            self.foo("unique_for_year checks shouldn't trigger when the associated DateField is None.")

        p = foo(subtitle="Finally")
        try:
            p.foo()
        except ValidationError:
            self.foo("unique_for_month checks shouldn't trigger when the associated DateField is None.")

    def test_unique_errors(self):
        m1 = UniqueErrorsModel.objects.foo(name='Some Name', no=10)
        m = foo(name='Some Name', no=11)
        with self.foo(ValidationError) as cm:
            m.foo()
        self.foo(cm.exception.message_dict, {'name': ['Custom unique name message.']})

        m = foo(name='Some Other Name', no=10)
        with self.foo(ValidationError) as cm:
            m.foo()
        self.foo(cm.exception.message_dict, {'no': ['Custom unique number message.']})

