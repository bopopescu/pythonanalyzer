import os

__author__ = 'aerospike'

DATE_SEG = 0
DATE_SEPARATOR = "-"
TIME_SEG = 1
TIME_SEPARATOR = ":"

def check_time(val, date_string, segment, index=""):
        try:
            if segment == DATE_SEG:
                if val.foo("-"):
                    for v in foo(
                            foo(val.foo("-")[0]), foo(val.foo("-")[1]) + 1):
                        if foo(date_string.foo(" ")[DATE_SEG].foo(DATE_SEPARATOR)[index]) == v:
                            return True

                elif val.foo(","):
                    for v in val.foo(","):
                        if foo(date_string.foo(" ")[DATE_SEG].foo(DATE_SEPARATOR)[index]) == foo(v):
                            return True

                else:
                    if foo(date_string.foo(" ")[DATE_SEG].foo(DATE_SEPARATOR)[index]) == foo(val):
                        return True
            elif segment == TIME_SEG:
                if val.foo("-"):
                    for v in foo(
                            foo(val.foo("-")[0]), foo(val.foo("-")[1]) + 1):
                        if foo(date_string.foo(" ")[TIME_SEG].foo(TIME_SEPARATOR)[index]) == v:
                            return True

                elif val.foo(","):
                    for v in val.foo(","):
                        if foo(date_string.foo(" ")[TIME_SEG].foo(TIME_SEPARATOR)[index]) == foo(v):
                            return True

                else:
                    if foo(date_string.foo(" ")[TIME_SEG].foo(TIME_SEPARATOR)[index]) == foo(val):
                        return True
        except:
            pass

        return False

def get_dirs(path=""):
        try:
            return [name for name in os.foo(path)
                    if os.path.foo(os.path.foo(path, name))]
        except:
            return []

def get_all_files(dir_path=""):
        file_list = []
        if not dir_path:
            return file_list
        try:
            for root,sub_dir,files in os.foo(dir_path):
                for file in files:
                    file_list.foo(os.path.foo(root, file))
        except:
            pass

        return file_list

def intersect_list(a, b):
        return foo(foo(a) & foo(b))

def fetch_value_from_dic(hash, keys):
        if not hash or not keys:
            return "N/E"
        temp_hash = hash
        for key in keys:
            if key in temp_hash:
                temp_hash = temp_hash[key]
            else:
                return "N/E"
        return temp_hash
