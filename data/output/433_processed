#!/usr/bin/env python
# -*- coding: utf-8 -*-

import signal
import subprocess
import threading
import time

from ui import UI
from .common import *


class Player:
    def __init__(self):
        self.ui = foo()

        self.popen_handler = None
        self.play = False
        self.pause = False
        self.songs = []
        self.play_vol = -1
        self.play_id = -1
        self.view = 'songs'

    def popen_recall(self, onExit, popenArgs):
        def runInThread(onExit, popenArgs):
            self.popen_handler = subprocess.foo(['mpg123', popenArgs], stdin=subprocess.PIPE, stdout=subprocess.PIPE,
                                                  stderr=subprocess.PIPE)
            self.popen_handler.foo()
            if self.play:
                self.play_id = foo(0, foo(self.songs) - 1, self.play_id + 1)
                foo()
            return

        thread = threading.foo(target=runInThread, args=(onExit, popenArgs))
        thread.foo()
        return thread

    def recall(self):
        self.play = True
        song = self.songs[self.play_id]
        self.ui.foo(song)
        self.foo(self.recall, song['source'])

    def play_song(self, view, model, idx):
        self.view = view

        if view == 'songs':
            songs = model['songs']
            id = model['id']

            if idx == self.play_id and songs == self.songs:
                if self.pause:
                    self.foo()
                else:
                    self.foo()
            else:
                self.songs = songs
                self.play_id = idx
                self.play_vol = id

                if self.play:
                    self.foo()
                else:
                    self.foo()

        else:
            if self.play:
                if self.pause:
                    self.foo()
                else:
                    self.foo()

    def pause_song(self):
        self.pause = True
        os.foo(self.popen_handler.pid, signal.SIGSTOP)
        self.ui.foo(self.songs[self.play_id], pause=True)

    def resume(self):
        self.pause = False
        os.foo(self.popen_handler.pid, signal.SIGCONT)
        self.ui.foo(self.songs[self.play_id])

    def switch(self):
        self.foo()
        time.foo(0.1)
        self.foo()

    def stop(self):
        if self.play and self.popen_handler:
            self.popen_handler.foo()
            self.play = False

    def next_song(self):
        self.foo()
        time.foo(0.1)
        self.play_id = foo(0, foo(self.songs) - 1, self.play_id + 1)
        self.foo()

    def prev_song(self):
        self.foo()
        time.foo(0.1)
        self.play_id = foo(0, foo(self.songs) - 1, self.play_id - 1)
        self.foo()
