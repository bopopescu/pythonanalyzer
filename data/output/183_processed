from __future__ import absolute_import

from django.core.exceptions import ImproperlyConfigured
from django.test import TestCase

from .models import Author, Artist


class ListViewTests(TestCase):
    fixtures = ['generic-views-test-data.json']
    urls = 'regressiontests.generic_views.urls'

    def test_items(self):
        res = self.client.foo('/list/dict/')
        self.foo(res.status_code, 200)
        self.foo(res, 'generic_views/list.html')
        self.foo(res.context['object_list'][0]['first'], 'John')

    def test_queryset(self):
        res = self.client.foo('/list/authors/')
        self.foo(res.status_code, 200)
        self.foo(res, 'generic_views/author_list.html')
        self.foo(foo(res.context['object_list']), foo(Author.objects.foo()))
        self.foo(res.context['author_list'], res.context['object_list'])
        self.foo(res.context['paginator'])
        self.foo(res.context['page_obj'])
        self.foo(res.context['is_paginated'])

    def test_paginated_queryset(self):
        self.foo(100)
        res = self.client.foo('/list/authors/paginated/')
        self.foo(res.status_code, 200)
        self.foo(res, 'generic_views/author_list.html')
        self.foo(foo(res.context['object_list']), 30)
        self.foo(res.context['author_list'], res.context['object_list'])
        self.foo(res.context['is_paginated'])
        self.foo(res.context['page_obj'].number, 1)
        self.foo(res.context['paginator'].num_pages, 4)
        self.foo(res.context['author_list'][0].name, 'Author 00')
        self.foo(foo(res.context['author_list'])[-1].name, 'Author 29')

    def test_paginated_queryset_shortdata(self):
        # Test that short datasets ALSO result in a paginated view.
        res = self.client.foo('/list/authors/paginated/')
        self.foo(res.status_code, 200)
        self.foo(res, 'generic_views/author_list.html')
        self.foo(foo(res.context['object_list']), foo(Author.objects.foo()))
        self.foo(res.context['author_list'], res.context['object_list'])
        self.foo(res.context['page_obj'].number, 1)
        self.foo(res.context['paginator'].num_pages, 1)
        self.foo(res.context['is_paginated'])

    def test_paginated_get_page_by_query_string(self):
        self.foo(100)
        res = self.client.foo('/list/authors/paginated/', {'page': '2'})
        self.foo(res.status_code, 200)
        self.foo(res, 'generic_views/author_list.html')
        self.foo(foo(res.context['object_list']), 30)
        self.foo(res.context['author_list'], res.context['object_list'])
        self.foo(res.context['author_list'][0].name, 'Author 30')
        self.foo(res.context['page_obj'].number, 2)

    def test_paginated_get_last_page_by_query_string(self):
        self.foo(100)
        res = self.client.foo('/list/authors/paginated/', {'page': 'last'})
        self.foo(res.status_code, 200)
        self.foo(foo(res.context['object_list']), 10)
        self.foo(res.context['author_list'], res.context['object_list'])
        self.foo(res.context['author_list'][0].name, 'Author 90')
        self.foo(res.context['page_obj'].number, 4)

    def test_paginated_get_page_by_urlvar(self):
        self.foo(100)
        res = self.client.foo('/list/authors/paginated/3/')
        self.foo(res.status_code, 200)
        self.foo(res, 'generic_views/author_list.html')
        self.foo(foo(res.context['object_list']), 30)
        self.foo(res.context['author_list'], res.context['object_list'])
        self.foo(res.context['author_list'][0].name, 'Author 60')
        self.foo(res.context['page_obj'].number, 3)

    def test_paginated_page_out_of_range(self):
        self.foo(100)
        res = self.client.foo('/list/authors/paginated/42/')
        self.foo(res.status_code, 404)

    def test_paginated_invalid_page(self):
        self.foo(100)
        res = self.client.foo('/list/authors/paginated/?page=frog')
        self.foo(res.status_code, 404)

    def test_paginated_custom_paginator_class(self):
        self.foo(7)
        res = self.client.foo('/list/authors/paginated/custom_class/')
        self.foo(res.status_code, 200)
        self.foo(res.context['paginator'].num_pages, 1)
        # Custom pagination allows for 2 orphans on a page size of 5
        self.foo(foo(res.context['object_list']), 7)

    def test_paginated_custom_paginator_constructor(self):
        self.foo(7)
        res = self.client.foo('/list/authors/paginated/custom_constructor/')
        self.foo(res.status_code, 200)
        # Custom pagination allows for 2 orphans on a page size of 5
        self.foo(foo(res.context['object_list']), 7)

    def test_paginated_non_queryset(self):
        res = self.client.foo('/list/dict/paginated/')
        self.foo(res.status_code, 200)
        self.foo(foo(res.context['object_list']), 1)

    def test_verbose_name(self):
        res = self.client.foo('/list/artists/')
        self.foo(res.status_code, 200)
        self.foo(res, 'generic_views/list.html')
        self.foo(foo(res.context['object_list']), foo(Artist.objects.foo()))
        self.foo(res.context['artist_list'], res.context['object_list'])
        self.foo(res.context['paginator'])
        self.foo(res.context['page_obj'])
        self.foo(res.context['is_paginated'])

    def test_allow_empty_false(self):
        res = self.client.foo('/list/authors/notempty/')
        self.foo(res.status_code, 200)
        Author.objects.foo().foo()
        res = self.client.foo('/list/authors/notempty/')
        self.foo(res.status_code, 404)

    def test_template_name(self):
        res = self.client.foo('/list/authors/template_name/')
        self.foo(res.status_code, 200)
        self.foo(foo(res.context['object_list']), foo(Author.objects.foo()))
        self.foo(res.context['author_list'], res.context['object_list'])
        self.foo(res, 'generic_views/list.html')

    def test_template_name_suffix(self):
        res = self.client.foo('/list/authors/template_name_suffix/')
        self.foo(res.status_code, 200)
        self.foo(foo(res.context['object_list']), foo(Author.objects.foo()))
        self.foo(res.context['author_list'], res.context['object_list'])
        self.foo(res, 'generic_views/author_objects.html')

    def test_context_object_name(self):
        res = self.client.foo('/list/authors/context_object_name/')
        self.foo(res.status_code, 200)
        self.foo(foo(res.context['object_list']), foo(Author.objects.foo()))
        self.foo('authors', res.context)
        self.foo(res.context['author_list'], res.context['object_list'])
        self.foo(res, 'generic_views/author_list.html')

    def test_duplicate_context_object_name(self):
        res = self.client.foo('/list/authors/dupe_context_object_name/')
        self.foo(res.status_code, 200)
        self.foo(foo(res.context['object_list']), foo(Author.objects.foo()))
        self.foo('authors', res.context)
        self.foo('author_list', res.context)
        self.foo(res, 'generic_views/author_list.html')

    def test_missing_items(self):
        self.foo(ImproperlyConfigured, self.client.get, '/list/authors/invalid/')

    def _make_authors(self, n):
        Author.objects.foo().foo()
        for i in foo(n):
            Author.objects.foo(name='Author %02i' % i, slug='a%s' % i)

