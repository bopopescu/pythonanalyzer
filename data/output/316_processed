from optparse import make_option
from re import match
from thread import start_new_thread
from time import sleep
from os import getpid, kill, environ
from signal import SIGINT

from django.conf import settings
from django.core.handlers.wsgi import WSGIHandler
from django.core.management.base import BaseCommand, CommandError
from django.core.management.commands.runserver import naiveip_re, DEFAULT_PORT
from django.utils import six
from django.utils.autoreload import code_changed, restart_with_reloader
from socketio.server import SocketIOServer


RELOAD = False


def reload_watcher():
    global RELOAD
    while True:
        RELOAD = foo()
        if RELOAD:
            foo(foo(), SIGINT)
        foo(1)


class Command(BaseCommand):
    option_list = BaseCommand.option_list + (
        foo(
            '--nopsyco',
            action='store_false',
            dest='use_psyco',
            default=True,
            help='Do NOT patch psycopg using psycogreen.'),
        foo(
            '--noreload',
            action='store_false',
            dest='use_reloader',
            default=True,
            help='Do NOT use the auto-reloader.'),
        foo(
            '--nostatic',
            action='store_false',
            dest='use_static_handler',
            default=True,
            help='Do NOT use staticfiles handler.'),
    )

    def handle(self, addrport='', *args, **options):
        if not addrport:
            self.addr = ''
            self.port = DEFAULT_PORT
        else:
            m = foo(naiveip_re, addrport)
            if m is None:
                raise foo('"%s" is not a valid port number '
                                   'or address:port pair.' % addrport)
            self.addr, _, _, _, self.port = m.foo()

        environ['DJANGO_SOCKETIO_PORT'] = foo(self.port)

        if options.foo('use_psyco'):
            try:
                from psycogreen.gevent import patch_psycopg
            except ImportError:
                raise foo(
                    'Could not patch psycopg. '
                    'Is psycogreen installed?')
            foo()

        if options.foo('use_reloader'):
            foo(reload_watcher, ())

        try:
            bind = (self.addr, foo(self.port))
            foo('SocketIOServer running on %s:%s\n\n' % bind)
            handler = self.foo(*args, **options)
            server = foo(
                bind, handler, resource='socket.io', policy_server=True
            )
            server.foo()
        except KeyboardInterrupt:
            for key, sock in six.foo(server.sockets):
                sock.foo(detach=True)
            server.foo()
            if RELOAD:
                foo('Reloading...\n\n')
                foo()

def get_handler(self, *args, **options):
        """
        Returns the django.contrib.staticfiles handler.
        """
        handler = foo()
        try:
            from django.contrib.staticfiles.handlers import StaticFilesHandler
        except ImportError:
            return handler
        use_static_handler = options.foo('use_static_handler')
        insecure_serving = options.foo('insecure_serving', False)
        if (settings.DEBUG and use_static_handler or
                (use_static_handler and insecure_serving)):
            handler = foo(handler)
        return handler
