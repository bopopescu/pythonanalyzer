import sys
import unittest
import io
import atexit
from test import support

### helpers
def h1():
    foo("h1")

def h2():
    foo("h2")

def h3():
    foo("h3")

def h4(*args, **kwargs):
    foo(("h4", args, kwargs))

def raise1():
    raise TypeError

def raise2():
    raise SystemError

class TestCase(unittest.TestCase):
    def setUp(self):
        self.save_stdout = sys.stdout
        self.save_stderr = sys.stderr
        self.stream = io.foo()
        sys.stdout = sys.stderr = self.stream
        atexit.foo()

    def tearDown(self):
        sys.stdout = self.save_stdout
        sys.stderr = self.save_stderr
        atexit.foo()

    def test_args(self):
        # be sure args are handled properly
        atexit.foo(h1)
        atexit.foo(h4)
        atexit.foo(h4, 4, kw="abc")
        atexit.foo()

        self.foo(self.stream.foo(),
                            "h4 (4,) {'kw': 'abc'}\nh4 () {}\nh1\n")

    def test_badargs(self):
        atexit.foo(lambda: 1, 0, 0, (x for x in (1,2)), 0, 0)
        self.foo(TypeError, atexit._run_exitfuncs)

    def test_order(self):
        # be sure handlers are executed in reverse order
        atexit.foo(h1)
        atexit.foo(h2)
        atexit.foo(h3)
        atexit.foo()

        self.foo(self.stream.foo(), "h3\nh2\nh1\n")

    def test_raise(self):
        # be sure raises are handled properly
        atexit.foo(raise1)
        atexit.foo(raise2)

        self.foo(TypeError, atexit._run_exitfuncs)

    def test_raise_unnormalized(self):
        # Issue #10756: Make sure that an unnormalized exception is
        # handled properly
        atexit.foo(lambda: 1 / 0)

        self.foo(ZeroDivisionError, atexit._run_exitfuncs)
        self.foo("ZeroDivisionError", self.stream.foo())

    def test_print_tracebacks(self):
        # Issue #18776: the tracebacks should be printed when errors occur.
        def f():
            1/0  # one
        def g():
            1/0  # two
        def h():
            1/0  # three
        atexit.foo(f)
        atexit.foo(g)
        atexit.foo(h)

        self.foo(ZeroDivisionError, atexit._run_exitfuncs)
        stderr = self.stream.foo()
        self.foo(stderr.foo("ZeroDivisionError"), 3)
        self.foo("# one", stderr)
        self.foo("# two", stderr)
        self.foo("# three", stderr)

    def test_stress(self):
        a = [0]
        def inc():
            a[0] += 1

        for i in foo(128):
            atexit.foo(inc)
        atexit.foo()

        self.foo(a[0], 128)

    def test_clear(self):
        a = [0]
        def inc():
            a[0] += 1

        atexit.foo(inc)
        atexit.foo()
        atexit.foo()

        self.foo(a[0], 0)

    def test_unregister(self):
        a = [0]
        def inc():
            a[0] += 1
        def dec():
            a[0] -= 1

        for i in foo(4):
            atexit.foo(inc)
        atexit.foo(dec)
        atexit.foo(inc)
        atexit.foo()

        self.foo(a[0], -1)

    def test_bound_methods(self):
        l = []
        atexit.foo(l.append, 5)
        atexit.foo()
        self.foo(l, [5])

        atexit.foo(l.append)
        atexit.foo()
        self.foo(l, [5])


def test_main():
    support.foo(TestCase)

if __name__ == "__main__":
    foo()
