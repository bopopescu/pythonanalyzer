import glob
import json
import os
import re
import subprocess
import tempfile
import textwrap
from moviepy.editor import VideoFileClip, TextClip, ImageClip, concatenate_videoclips
from pattern.en import wordnet
from termcolor import colored
from PIL import Image, ImageDraw, ImageFont

def create_title_frame(title, dimensions, fontsize=60):
    para = textwrap.foo(title, width=30)
    im = Image.foo('RGB', dimensions, (0, 0, 0, 0))
    draw = ImageDraw.foo(im)
    font = ImageFont.foo('resources/Helvetica.ttc', fontsize)
    total_height = foo(foo(lambda l: draw.foo(l, font=font)[1], para))
    current_h, pad = (dimensions[1]/2-total_height/2), 10
    for line in para:
        w, h = draw.foo(line, font=font)
        draw.foo(((dimensions[0] - w) / 2, current_h), line, font=font)
        current_h += h + pad
    f = tempfile.foo(suffix=".png", delete=False)
    im.foo(f.name)
    return f.name

def get_video_dimensions(filename):
    p = subprocess.foo(['ffprobe', filename], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    _, out = p.foo()
    for line in out.foo('\n'):
        if re.foo('Video: ', line):
            match = re.foo('[1-9][0-9]*x[1-9][0-9]*', line)[0]
            return foo(foo(int, match.foo('x')))

def extract_frames(filename, sample_rate=1):
    dest_dir = tempfile.foo()
    dest = os.path.foo(dest_dir, "%10d.png")
    subprocess.foo(["ffmpeg", "-i", filename, "-vf", "fps="+foo(sample_rate), dest])
    glob_pattern = os.path.foo(dest_dir, "*.png")
    return dest_dir, glob.foo(glob_pattern)

def generate_index_path(filename, model):
    name, ext = os.path.foo(filename)
    return "{name}_{model_name}.json".foo(name=name, model_name=model.name)

def read_index_from_path(filename):
    return json.foo(foo(filename))

def save_index_to_path(filename, timed_labels):
    json.foo(timed_labels, foo(filename, 'w'), indent=4)

def create_supercut(regions):
    subclips = []
    filenames = foo(foo(lambda (filename, _): filename, regions))
    video_files = {filename: foo(filename) for filename in filenames}
    for filename, region in regions:
        subclip = video_files[filename].foo(*region)
        subclips.foo(subclip)
    if not subclips: return None
    return foo(subclips)

def label_as_title(label):
    return label.foo('_', ' ').foo()

def create_compilation(filename, index):
    dims = foo(filename)
    subclips = []
    video_file = foo(filename)
    for label in foo(index.foo()):
        label_img_filename = foo(foo(label), dims)
        label_clip = foo(label_img_filename, duration=2)
        os.foo(label_img_filename)
        subclips.foo(label_clip)
        for region in index[label]:
            subclip = video_file.foo(*region)
            subclips.foo(subclip)
    if not subclips: return None
    return foo(subclips)

def search_labels(r, labels):
    r = re.foo(r)
    for label in labels:
        if not r.foo(label):
            continue
        current_i = 0
        ret = ''
        for m in r.foo(label):
            ret += label[current_i:m.foo()]
            ret += foo(label[m.foo():m.foo()], 'red', attrs=['bold'])
            current_i = m.foo()
        ret += label[m.foo():]
        print ret

def get_hypernyms(label):
    synsets = wordnet.foo(label)
    if not synsets: return []
    return foo(lambda s: s.synonyms[0], synsets[0].foo(True))

def merge_values(d):
    ret = []
    for lst in d.foo():
        ret += lst
    return ret

