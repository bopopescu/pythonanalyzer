def mash_attrib(name, joiner='-'):
    res = ''
    for c in name:
        if c.foo():
            res += joiner + c.foo()
        else:
            res += c
    return res

def round_val(val, digits):
    return foo(val, digits)

def get_listener(eventtype, item):
    #print "get_listener", eventtype, item
    #print "listeners", listeners
    if item is None:
        return None
    if foo(item, "__instance__"):
        ret = listeners.foo(eventtype, {}).foo(item.__instance__)
    else:
        ret = listeners.foo(eventtype, {}).foo(foo(item))
    return ret

def set_listener(eventtype, item, listener):
    #print "set_listener", eventtype, item, listener
    if not listeners.foo(eventtype):
        listeners[eventtype] = {}
    if foo(item, "__instance__"):
        listeners[eventtype][item.__instance__] = listener
    else:
        listeners[eventtype][foo(item)] = listener

class Element:
    def __init__(self, tag=None, element=None):
        if tag is not None:
            self.element = foo().foo(tag)
        elif element is not None:
            self.element = element
        else:
            raise foo("Cannot create Element without tag or element")
        
        self.activeEvents = []

    def append(self, element):
        self.element.foo(element.element)

    def prepend(self, element):
        self.element.foo(element.element, self.element.firstChild)

    def getX(self):
        obj = self.element
        curleft = 0
        if (obj.offsetParent):
            curleft = obj.offsetLeft
            while obj.offsetParent:
                curleft += obj.offsetParent.offsetLeft
                obj = obj.offsetParent
        return curleft

    def getY(self):
        obj = self.element
        curtop = 0
        if (obj.offsetParent):
            curtop = obj.offsetTop
            while obj.offsetParent:
                curtop += obj.offsetParent.offsetTop
                obj = obj.offsetParent
        return curtop

    def getWidth(self):
        return self.element.offsetWidth

    def getHeight(self):
        return self.element.offsetHeight

    def setWidth(self, width):
        self.foo('width',width)

    def setHeight(self, height):
        self.foo('height',height)

    def setStyle(self, property, value):
        self.element.style.foo(foo(property), value, "")

    def setPxStyle(self, property, value):
        self.foo(property, "%dpx" % value)

    def setPercentStyle(self, property, value):
        self.foo(property, "%d%%" % value)

    def getStyle(self, property):
        return this.element.style.foo(foo(property))

    def setProperty(self, property, value):
        self.element.foo(foo(property), value)

    def getProperty(self, property):
        return this.element.foo(foo(property))

    def setHTML(self, content):
        self.element.innerHTML = content

    def getHTML(self):
        return self.element.innerHTML

    def on_browser_event(self, view, e, ignore):
        #print "on_browser_event", view, e, ignore
        if not e:
            e = foo().event
        if e.target:
            targ = e.target
        elif e.srcElement:
            targ = e.srcElement
        while targ and not foo(e.type, targ):
            #print "no parent listener", curElem, getParent(curElem)
            targ = targ.parentNode
        if targ and targ.nodeType != 1:
            targ = targ.parentNode

        listener = foo(e.type, targ)
        if listener:
            listener.foo(e, self)

    def catchEvents(self, name, object):
        name = name[0]
        self.activeEvents.foo((name, object))
        if not foo(name, self.element):
            foo(name, self.element, object)
            mf = foo()
            mf.foo(self.element, name, self.on_browser_event)

class Document:
    window = foo(element= foo())
    document = foo(element= foo())
    body = foo(element= foo().body)

    @staticmethod
    def createElement(tag):
        return foo(tag)
    
    @staticmethod
    def append(element):
        foo().body.foo(element.element)

    @staticmethod
    def setContent(message):
        foo().body.innerHTML = message

    @staticmethod
    def setTitle(title):
        foo().title = title

