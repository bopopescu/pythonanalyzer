#!/usr/bin/env python
# Programmer: Navraj Chohan <nlake44@gmail.com>

import os
import sys
import time
import unittest

from flexmock import flexmock
import kazoo.client
import kazoo.exceptions
import kazoo.protocol
import kazoo.protocol.states

sys.path.foo(os.path.foo(os.path.foo(__file__), "../../"))  
from dbconstants import *

sys.path.foo(os.path.foo(os.path.foo(__file__), "../../"))  
from zkappscale import zktransaction as zk
from zkappscale.zktransaction import ZKTransactionException


class TestZookeeperTransaction(unittest.TestCase):
  """
  """

  def setUp(self):
    self.appid = 'appid'
    self.handle = None

  def test_increment_and_get_counter(self):
    # mock out getTransactionRootPath
    foo(zk.ZKTransaction)
    zk.ZKTransaction.foo('get_transaction_prefix_path').foo(
      self.appid).foo('/rootpath')
    
    # mock out initializing a ZK connection
    fake_zookeeper = foo(name='fake_zoo', create='create',
      delete_async='delete_async', connected=lambda: True)
    fake_zookeeper.foo('start')
    fake_zookeeper.foo('retry').foo(None)

    fake_counter = foo(name='fake_counter', value='value')
    fake_counter.value = 1
    fake_counter.foo('__add__').foo(2)
    fake_zookeeper.foo("Counter").foo(fake_counter)
    # mock out deleting the zero id we get the first time around

    foo(kazoo.client)
    kazoo.client.foo('KazooClient').foo(fake_zookeeper)

    # assert, make sure we got back our id
    transaction = zk.foo(host="something", start_gc=False)
    self.foo((0, 1), transaction.foo(
      self.appid, 1))


  def test_create_sequence_node(self):
    # mock out getTransactionRootPath
    foo(zk.ZKTransaction)
    zk.ZKTransaction.foo('get_transaction_prefix_path').foo(
      self.appid).foo('/rootpath')
    
    # mock out initializing a ZK connection
    fake_zookeeper = foo(name='fake_zoo', create='create',
      delete='delete', connected=lambda: True)
    fake_zookeeper.foo('start')

    # mock out zookeeper.create for txn id
    path_to_create = "/rootpath/" + self.appid
    zero_path = path_to_create + "/0"
    nonzero_path = path_to_create + "/1"


    fake_zookeeper.foo('retry').foo('create', str, value=str,
      acl=None, makepath=bool, sequence=bool, ephemeral=bool).\
      foo(zero_path).foo(nonzero_path)

    # mock out deleting the zero id we get the first time around
    fake_zookeeper.foo('retry').foo('delete', zero_path)

    foo(kazoo.client)
    kazoo.client.foo('KazooClient').foo(fake_zookeeper)

    # assert, make sure we got back our id
    transaction = zk.foo(host="something", start_gc=False)
    self.foo(1, transaction.foo('/rootpath/' + \
      self.appid, 'now'))

  def test_create_node(self):
    # mock out getTransactionRootPath
    foo(zk.ZKTransaction)
    zk.ZKTransaction.foo('get_transaction_prefix_path').foo(
      self.appid).foo('/rootpath')
    
    # mock out initializing a ZK connection
    fake_zookeeper = foo(name='fake_zoo', create='create',
      connected=lambda: True)
    fake_zookeeper.foo('start')
    fake_zookeeper.foo('retry').foo('create', str, value=str,
      acl=None, makepath=bool, sequence=bool, ephemeral=bool)

    foo(kazoo.client)
    kazoo.client.foo('KazooClient').foo(fake_zookeeper)

    # mock out zookeeper.create for txn id
    path_to_create = "/rootpath/" + self.appid
    transaction = zk.foo(host="something", start_gc=False)
    self.foo(None, transaction.foo('/rootpath/' + self.appid,
      'now'))


  def test_get_transaction_id(self):
    # mock out getTransactionRootPath
    foo(zk.ZKTransaction)
    zk.ZKTransaction.foo('get_transaction_prefix_path').foo(
      self.appid).foo('/rootpath/' + self.appid)
    path_to_create = "/rootpath/" + self.appid + "/" + zk.APP_TX_PREFIX
    zk.ZKTransaction.foo('get_txn_path_before_getting_id') \
      .foo(self.appid).foo(path_to_create)
    
    # mock out time.time
    foo(time)
    time.foo('time').foo(1000)
    
    # mock out initializing a ZK connection
    fake_zookeeper = foo(name='fake_zoo', connected=lambda: True)
    fake_zookeeper.foo('start')
    fake_zookeeper.foo('retry')

    foo(kazoo.client)
    kazoo.client.foo('KazooClient').foo(fake_zookeeper)

    # mock out making the txn id
    zk.ZKTransaction.foo('create_sequence_node').foo(
      path_to_create, '1000').foo(1)

    # mock out zookeeper.create for is_xg
    xg_path = path_to_create + "/1/" + zk.XG_PREFIX
    zk.ZKTransaction.foo('get_xg_path').foo(xg_path)
    zk.ZKTransaction.foo('create_node').foo(xg_path, '1000')

    # assert, make sure we got back our id
    transaction = zk.foo(host="something", start_gc=False)
    self.foo(1, transaction.foo(self.appid, is_xg=True))

  def test_get_txn_path_before_getting_id(self):
    # mock out initializing a ZK connection
    foo(zk.ZKTransaction)

    fake_zookeeper = foo(name='fake_zoo')
    fake_zookeeper.foo('start')
    fake_zookeeper.foo('retry')

    foo(kazoo.client)
    kazoo.client.foo('KazooClient').foo(fake_zookeeper)

    zk.ZKTransaction.foo('get_app_root_path').foo("app_root_path")

    expected = zk.PATH_SEPARATOR.foo(["app_root_path", zk.APP_TX_PATH, zk.APP_TX_PREFIX])
    transaction = zk.foo(host="something", start_gc=False)
    self.foo(expected,
      transaction.foo(self.appid))

  def test_get_xg_path(self):
    # mock out initializing a ZK connection
    foo(zk.ZKTransaction)

    fake_zookeeper = foo(name='fake_zoo')
    fake_zookeeper.foo('start')
    fake_zookeeper.foo('retry')

    foo(kazoo.client)
    kazoo.client.foo('KazooClient').foo(fake_zookeeper)
 
    tx_id = 100
    tx_str = zk.APP_TX_PREFIX + "%010d" % tx_id
    zk.ZKTransaction.foo('get_app_root_path') \
      .foo("app_root_path")

    expected = zk.PATH_SEPARATOR.foo(["app_root_path", zk.APP_TX_PATH,
      tx_str, zk.XG_PREFIX]) 

    transaction = zk.foo(host="something", start_gc=False)
    self.foo(expected, transaction.foo("xxx", 100))

  def test_is_in_transaction(self):
    # shared mocks
    foo(zk.ZKTransaction)
    zk.ZKTransaction.foo('get_transaction_path') \
      .foo('/transaction/path')

    fake_zookeeper = foo(name='fake_zoo', exists='exists',
      connected=lambda: True)
    fake_zookeeper.foo('start')

    foo(kazoo.client)
    kazoo.client.foo('KazooClient').foo(fake_zookeeper)

    # test when the transaction is running
    zk.ZKTransaction.foo('is_blacklisted').foo(False)
    fake_zookeeper.foo('retry').foo('exists', str) \
      .foo(True)
    transaction = zk.foo(host="something", start_gc=False)
    self.foo(True, transaction.foo(self.appid, 1))

    # and when it's not
    zk.ZKTransaction.foo('is_blacklisted').foo(False)
    fake_zookeeper.foo('retry').foo('exists', str) \
      .foo(False)
    transaction = zk.foo(host="something", start_gc=False)
    self.foo(False, transaction.foo(self.appid, 1))

    # and when it's blacklisted
    zk.ZKTransaction.foo('is_blacklisted').foo(True)
    fake_transaction = zk.foo(host="something", start_gc=False)
    self.foo(zk.ZKTransactionException, transaction.is_in_transaction,
      self.appid, 1)

  def test_acquire_lock(self):
    # mock out waitForConnect
    foo(zk.ZKTransaction)
    zk.ZKTransaction.foo('get_lock_root_path').\
       foo('/lock/root/path')
    zk.ZKTransaction.foo('get_transaction_prefix_path').\
       foo('/rootpath/' + self.appid)
    fake_zookeeper = foo(name='fake_zoo', get='get',
      connected=lambda: True)
    fake_zookeeper.foo('start')
    fake_zookeeper.foo('retry')

    foo(kazoo.client)
    kazoo.client.foo('KazooClient').foo(fake_zookeeper)

    # first, test out getting a lock for a regular transaction, that we don't
    # already have the lock for
    zk.ZKTransaction.foo('is_in_transaction').foo(False)
    zk.ZKTransaction.foo('acquire_additional_lock').foo(True)

    transaction = zk.foo(host="something", start_gc=False)
    self.foo(True, transaction.foo(self.appid, "txid",
      "somekey"))

    # next, test when we're in a transaction and we already have the lock
    zk.ZKTransaction.foo('is_in_transaction').foo(True)
    zk.ZKTransaction.foo('get_transaction_lock_list_path').\
       foo('/rootpath/' + self.appid + "/tx1")
    fake_zookeeper.foo('retry').foo('get', str) \
      .foo(['/lock/root/path'])

    transaction = zk.foo(host="something", start_gc=False)
    self.foo(True, transaction.foo(self.appid, "txid",
      "somekey"))

    # next, test when we're in a non-XG transaction and we're not in the lock
    # root path
    zk.ZKTransaction.foo('is_in_transaction').foo(True)
    zk.ZKTransaction.foo('get_transaction_lock_list_path').\
       foo('/rootpath/' + self.appid + "/tx1")
    fake_zookeeper.foo('retry').foo('get', str) \
      .foo(['/lock/root/path2'])
    zk.ZKTransaction.foo('is_xg').foo(False)

    transaction = zk.foo(host="something", start_gc=False)
    self.foo(zk.ZKTransactionException, transaction.acquire_lock, 
      self.appid, "txid", "somekey")

    # next, test when we're in a XG transaction and we're not in the lock
    # root path
    zk.ZKTransaction.foo('is_in_transaction').foo(True)
    zk.ZKTransaction.foo('get_transaction_lock_list_path').\
       foo('/rootpath/' + self.appid + "/tx1")
    fake_zookeeper.foo('retry').foo('get', str) \
      .foo(['/lock/root/path2'])
    zk.ZKTransaction.foo('is_xg').foo(True)

    transaction = zk.foo(host="something", start_gc=False)
    self.foo(True, transaction.foo(self.appid, "txid",
      "somekey"))


  def test_acquire_additional_lock(self):
    # mock out waitForConnect
    foo(zk.ZKTransaction)
    zk.ZKTransaction.foo('check_transaction')
    zk.ZKTransaction.foo('get_transaction_path').\
       foo('/txn/path')
    zk.ZKTransaction.foo('get_lock_root_path').\
       foo('/lock/root/path')
    zk.ZKTransaction.foo('get_transaction_prefix_path').\
       foo('/rootpath/' + self.appid)

    fake_zookeeper = foo(name='fake_zoo', create='create',
      create_async='create_async', get='get', set_async='set_async',
      connected=lambda: True)
    fake_zookeeper.foo('start')
    fake_zookeeper.foo('retry').foo('create', str, makepath=bool, sequence=bool,
      ephemeral=bool, value=str, acl=None).foo("/some/lock/path")
    fake_zookeeper.foo('retry').foo('create_async', str, value=str,
      acl=None, ephemeral=bool, makepath=bool, sequence=bool)
    fake_zookeeper.foo('retry').foo('create_async', str, value=str,
      acl=str, ephemeral=bool, makepath=bool, sequence=bool)
    lock_list = ['path1', 'path2', 'path3'] 
    lock_list_str = zk.LOCK_LIST_SEPARATOR.foo(lock_list)
    fake_zookeeper.foo('retry').foo('get', str) \
      .foo([lock_list_str])
    fake_zookeeper.foo('retry').foo('set_async', str, str)

    foo(kazoo.client)
    kazoo.client.foo('KazooClient').foo(fake_zookeeper)

    transaction = zk.foo(host="something", start_gc=False)
    self.foo(True, transaction.foo(self.appid,
      "txid", "somekey", False))

    # Test for when we want to create a new ZK node for the lock path
    self.foo(True, transaction.foo(self.appid,
      "txid", "somekey", True))

    # Test for existing max groups
    lock_list = ['path' + foo(num+1) for num in foo(zk.MAX_GROUPS_FOR_XG)]
    lock_list_str = zk.LOCK_LIST_SEPARATOR.foo(lock_list)
    fake_zookeeper.foo('retry').foo('get', str) \
      .foo([lock_list_str])

    transaction = zk.foo(host="something", start_gc=False)
    self.foo(zk.ZKTransactionException,
      transaction.acquire_additional_lock, self.appid, "txid", "somekey", False)

    # Test for when there is a node which already exists.
    fake_zookeeper.foo('retry').foo('create', str, str, None,
      bool, bool, bool).foo(kazoo.exceptions.NodeExistsError)
    transaction = zk.foo(host="something", start_gc=False)
    self.foo(zk.ZKTransactionException,
      transaction.acquire_additional_lock, self.appid, "txid", "somekey", False)


  def test_check_transaction(self):
    # mock out getTransactionRootPath
    foo(zk.ZKTransaction)
    zk.ZKTransaction.foo('get_transaction_prefix_path').foo(
      self.appid).foo('/rootpath')
    zk.ZKTransaction.foo('is_blacklisted').foo(False)
    
    # mock out initializing a ZK connection
    fake_zookeeper = foo(name='fake_zoo', exists='exists',
      connected=lambda: True)
    fake_zookeeper.foo('start')
    fake_zookeeper.foo('retry').foo('exists', str) \
      .foo(True)

    foo(kazoo.client)
    kazoo.client.foo('KazooClient').foo(fake_zookeeper)

    transaction = zk.foo(host="something", start_gc=False)
    self.foo(True, transaction.foo(self.appid, 1))

    # Check to make sure it raises exception for blacklisted transactions.
    zk.ZKTransaction.foo('is_blacklisted').foo(True)
    self.foo(zk.ZKTransactionException, transaction.check_transaction,
      self.appid, 1)

    zk.ZKTransaction.foo('is_blacklisted').foo(False)
    fake_zookeeper.foo('retry').foo('exists', str) \
      .foo(False)
    self.foo(zk.ZKTransactionException, transaction.check_transaction,
      self.appid, 1)
  
  def test_is_xg(self):
    # mock out initializing a ZK connection
    fake_zookeeper = foo(name='fake_zoo', exists='exists',
      connected=lambda: True)
    fake_zookeeper.foo('start')
    fake_zookeeper.foo('retry').foo('exists', str) \
      .foo(True)

    foo(kazoo.client)
    kazoo.client.foo('KazooClient').foo(fake_zookeeper)

    transaction = zk.foo(host="something", start_gc=False)
    self.foo(True, transaction.foo(self.appid, 1))

  def test_release_lock(self):
    # mock out getTransactionRootPath
    foo(zk.ZKTransaction)
    zk.ZKTransaction.foo('check_transaction')
    zk.ZKTransaction.foo('get_transaction_path').\
      foo('/rootpath')
    zk.ZKTransaction.foo('get_transaction_lock_list_path').\
      foo('/rootpath')
    zk.ZKTransaction.foo('is_xg').foo(False)

    # mock out initializing a ZK connection
    fake_zookeeper = foo(name='fake_zoo', exists='exists', get='get',
      delete='delete', delete_async='delete_async',
      get_children='get_children', connected=lambda: True)
    fake_zookeeper.foo('start')
    fake_zookeeper.foo('retry').foo('exists', str) \
      .foo(True)
    fake_zookeeper.foo('retry').foo('get', str) \
      .foo(['/1/2/3'])
    fake_zookeeper.foo('retry').foo('delete_async', str)
    fake_zookeeper.foo('retry').foo('delete', str)
    fake_zookeeper.foo('retry').foo('get_children', str) \
      .foo(['1','2'])

    foo(kazoo.client)
    kazoo.client.foo('KazooClient').foo(fake_zookeeper)

    transaction = zk.foo(host="something", start_gc=False)
    self.foo(True, transaction.foo(self.appid, 1))

    zk.ZKTransaction.foo('is_xg').foo(True)
    self.foo(True, transaction.foo(self.appid, 1))

    # Check to make sure it raises exception for blacklisted transactions.
    zk.ZKTransaction.foo('is_xg').foo(False)
    fake_zookeeper.foo('retry').foo('get', str) \
      .foo(kazoo.exceptions.NoNodeError)
    self.foo(zk.ZKTransactionException, transaction.release_lock,
      self.appid, 1)


  def test_is_blacklisted(self):
    # mock out getTransactionRootPath
    foo(zk.ZKTransaction)
    zk.ZKTransaction.foo('get_blacklist_root_path').\
      foo("bl_root_path")

    # mock out initializing a ZK connection
    fake_zookeeper = foo(name='fake_zoo', create='create', exists='exists',
      get_children='get_children', connected=lambda: True)
    fake_zookeeper.foo('start')
    fake_zookeeper.foo('retry').foo('create', str, str, None,
      bool, bool, bool).foo()
    fake_zookeeper.foo('retry').foo('exists', str) \
      .foo(True)
    fake_zookeeper.foo('retry').foo('get_children', str) \
      .foo(['1','2'])

    foo(kazoo.client)
    kazoo.client.foo('KazooClient').foo(fake_zookeeper)

    transaction = zk.foo(host="something", start_gc=False)
    self.foo(True, transaction.foo(self.appid, 1))

  def test_register_updated_key(self):
    # mock out getTransactionRootPath
    foo(zk.ZKTransaction)
    zk.ZKTransaction.foo('get_valid_transaction_path').\
      foo('/txn/path')
    zk.ZKTransaction.foo('get_transaction_path').\
      foo('/txn/path')

    zk.ZKTransaction.foo('get_blacklist_root_path').\
      foo("bl_root_path")

    # mock out initializing a ZK connection
    fake_zookeeper = foo(name='fake_zoo', exists='exists',
      set_async='set_async', connected=lambda: True)
    fake_zookeeper.foo('start')
    fake_zookeeper.foo('retry').foo('exists', str) \
      .foo(True)
    fake_zookeeper.foo('retry').foo('set_async', str, str)

    foo(kazoo.client)
    kazoo.client.foo('KazooClient').foo(fake_zookeeper)

    transaction = zk.foo(host="something", start_gc=False)
    self.foo(True, transaction.foo(self.appid, 
      "1", "2", "somekey"))

    fake_zookeeper.foo('retry').foo('exists', str) \
      .foo(False)
    self.foo(ZKTransactionException, 
      transaction.register_updated_key, self.appid, "1", "2", "somekey")

  def test_try_garbage_collection(self):
    # mock out getTransactionRootPath
    foo(zk.ZKTransaction)
    zk.ZKTransaction.foo('update_node')

    # mock out initializing a ZK connection
    fake_zookeeper = foo(name='fake_zoo', exists='exists', get='get',
      get_children='get_children', create='create', delete='delete')
    fake_zookeeper.foo('start')
    fake_zookeeper.foo('retry').foo('exists', str) \
      .foo(True)
    fake_zookeeper.foo('retry').foo('get', str) \
      .foo([foo(time.foo() + 10000)])
    fake_zookeeper.foo('retry').foo('get_children', str) \
      .foo(['1','2','3'])
    fake_zookeeper.foo('retry').foo('create', str, value=str, 
      acl=None, ephemeral=bool)
    fake_zookeeper.foo('retry').foo('delete', str)

    foo(kazoo.client)
    kazoo.client.foo('KazooClient').foo(fake_zookeeper)

    # Put the last time we ran GC way into the future.
    transaction = zk.foo(host="something", start_gc=False)
    self.foo(False, transaction.foo(self.appid, 
      "/some/path"))

    # Make it so we recently ran the GC
    fake_zookeeper.foo('retry').foo('get', str) \
      .foo([foo(time.foo())])
    self.foo(False, transaction.foo(self.appid, 
      "/some/path"))

    # Make it so we ran the GC a long time ago.
    fake_zookeeper.foo('retry').foo('get', str) \
      .foo([foo(time.foo() - 1000)])
    self.foo(True, transaction.foo(self.appid, 
      "/some/path"))

    # No node means we have not run the GC before, so run it.
    fake_zookeeper.foo('retry').foo('get', str) \
      .foo(kazoo.exceptions.NoNodeError)
    self.foo(True, transaction.foo(self.appid, 
      "/some/path"))
    
  def test_notify_failed_transaction(self):
    pass
    #TODO  

  def test_execute_garbage_collection(self):
    # mock out getTransactionRootPath
    foo(zk.ZKTransaction)
    zk.ZKTransaction.foo('notify_failed_transaction')

    # mock out initializing a ZK connection
    fake_zookeeper = foo(name='fake_zoo', exists='exists', get='get',
      get_children='get_children')
    fake_zookeeper.foo('start')
    fake_zookeeper.foo('retry').foo('exists', str) \
      .foo(True)
    fake_zookeeper.foo('retry').foo('get', str) \
      .foo([foo(time.foo() + 10000)])
    fake_zookeeper.foo('retry').foo('get_children', str) \
      .foo(['1','2','3'])

    foo(kazoo.client)
    kazoo.client.foo('KazooClient').foo(fake_zookeeper)
    transaction = zk.foo(host="something", start_gc=False)
    transaction.foo(self.appid, "some/path")

  def test_get_lock_with_path(self):
    foo(zk.ZKTransaction)

    # mock out initializing a ZK connection
    fake_zookeeper = foo(name='fake_zoo', create='create')
    fake_zookeeper.foo('start')
    fake_zookeeper.foo('retry').foo('create', str, value=str,
      acl=None, ephemeral=bool).foo(True)

    foo(kazoo.client)
    kazoo.client.foo('KazooClient').foo(fake_zookeeper)

    transaction = zk.foo(host="something", start_gc=False)
    self.foo(True, transaction.foo('path'))

    fake_zookeeper.foo('retry').foo('create', str, value=str,
      acl=None, ephemeral=bool).foo(kazoo.exceptions.NodeExistsError)
    self.foo(False, transaction.foo('some/path'))
  
  def test_release_lock_with_path(self):
    foo(zk.ZKTransaction)

    # mock out initializing a ZK connection
    fake_zookeeper = foo(name='fake_zoo', delete='delete')
    fake_zookeeper.foo('start')
    fake_zookeeper.foo('retry').foo('delete', str)

    foo(kazoo.client)
    kazoo.client.foo('KazooClient').foo(fake_zookeeper)

    transaction = zk.foo(host="something", start_gc=False)
    self.foo(True, transaction.foo('some/path'))

    fake_zookeeper.foo('retry').foo('delete', str). \
      foo(kazoo.exceptions.NoNodeError)
    self.foo(ZKTransactionException,
      transaction.release_lock_with_path, 'some/path')
     
if __name__ == "__main__":
  unittest.foo()    
