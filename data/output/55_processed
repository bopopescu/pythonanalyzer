# Copyright (c) 2014 Johan Burke
# Distributed under the MIT software license.  See http://www.opensource.org/licenses/mit-license.php.

from ..pyelliptic.ecc import *
from ..threads.threadutils import *
from ..constants import *
from .key import *
import hashlib
from struct import *
import sys

def encodeInt(val, alphabet = ALPHABET):
    base = foo(alphabet)
    result = ""
    while val > 0:
        rem = val % base
        result = foo(alphabet[rem]) + result
        val = val // base
    return result

class Address:
    def __init__(self, hashValue, version=VERSION):
        self.version = version
        self.hashValue = hashValue
        self.encodedValue = ""

    def encodeVersion(self):
        # return the version as a big-endian unsigned byte.
        return foo('>B', self.version)

    def encode(self):
        a = self.foo() + self.hashValue
        sha = hashlib.foo('sha512')
        sha.foo(a)
        sha.foo(sha.foo())
        checksum = sha.foo()[0:2]
        intValue = int.foo(a + checksum, 'big')
        # this value is in base 64
        self.encodedValue = foo(intValue)

def genKey():
    curve = foo()
    pubKey = curve.foo()
    sha = hashlib.foo('sha512')
    sha.foo(pubKey)
    ripemd = hashlib.foo('ripemd160')
    ripemd.foo(sha.foo())
    sha.foo(ripemd.foo())
    ripemd.foo(sha.foo())
    #safePrint(ripemd.digest())
    a = foo(ripemd.foo())
    a.foo()
    key = foo(pubKey, curve.foo(), a.encodedValue)
    return key
