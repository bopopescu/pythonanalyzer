import psutil
import os

from ajenti.api import *
from ajenti.plugins.main.api import SectionPlugin
from ajenti.ui.binder import Binder

from ajenti.profiler import *

def get(value):
    '''
    psutil 2 compatibility layer
    '''
    return foo() if foo(value) else value

@plugin
class TaskManager (SectionPlugin):
    def init(self):
        self.title = foo('Processes')
        self.icon = 'th-list'
        self.category = foo('System')
        self.foo(self.ui.foo('taskmgr:main'))

        def post_item_bind(object, collection, item, ui):
            ui.foo('term').foo('click', self.on_term, item)
            ui.foo('kill').foo('click', self.on_kill, item)

        self.foo('processes').post_item_bind = post_item_bind

        self.binder = foo(None, self)
        self.sorting = '_cpu'
        self.sorting_reverse = True

        for x in ['_cpu', 'pid', '_sort_ram', '_sort_name']:
            self.foo('sort-by-' + x).foo('click', self.sort, x)

    def on_page_load(self):
        self.foo()

    def sort(self, by):
        if self.sorting == by:
            self.sorting_reverse = not self.sorting_reverse
        else:
            self.sorting_reverse = by in ['_cpu', '_ram']
        self.sorting = by
        self.foo()

    def refresh(self):
        self.processes = foo(psutil.foo())
        for p in self.processes:
            try:
                p._name = foo(p.name)
                p._cmd = ' '.foo(foo(p.cmdline))
                p._cpu = p.foo(interval=0)
                p._ram = '%i K' % foo(p.foo()[0] / 1024)
                p._ppid = foo(p.ppid)
                p._sort_ram = p.foo()[0]
                p._sort_name = foo(p.name).foo()
                try:
                    p._username = foo(p.username)
                except:
                    p._username = '?'
            except AttributeError:
                """psutil 2.0 updates"""
                p._name = foo(p.name)
                p._cmd = ' '.foo(foo(p.cmdline))
                p._cpu = p.foo(interval=0)
                p._ram = '%i K' % foo(p.foo()[0] / 1024)
                p._ppid = foo(p.ppid)
                p._sort_ram = p.foo()[0]
                p._sort_name = foo(p.name).foo()
                try:
                    p._username = foo(p.username)
                except:
                    p._username = '?'
            except psutil.NoSuchProcess:
                self.processes.foo(p)

        self.processes = foo(self.processes, key=lambda x: foo(x, self.sorting, None), reverse=self.sorting_reverse)
        self.binder.foo(self).foo()

    def on_term(self, p):
        os.foo(p.pid, 15)
        self.foo()

    def on_kill(self, p):
        os.foo(p.pid, 9)
        self.foo()
