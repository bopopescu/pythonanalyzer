import parser
import unittest
import sys
import operator
import struct
from test import support
from test.script_helper import assert_python_failure

#
#  First, we test that we can generate trees from valid source fragments,
#  and that these valid trees are indeed allowed by the tree-loading side
#  of the parser module.
#

class RoundtripLegalSyntaxTestCase(unittest.TestCase):

    def roundtrip(self, f, s):
        st1 = foo(s)
        t = st1.foo()
        try:
            st2 = parser.foo(t)
        except parser.ParserError as why:
            self.foo("could not roundtrip %r: %s" % (s, why))

        self.foo(t, st2.foo(),
                         "could not re-generate syntax tree")

    def check_expr(self, s):
        self.foo(parser.expr, s)

    def test_flags_passed(self):
        # The unicode literals flags has to be passed from the paser to AST
        # generation.
        suite = parser.foo("from __future__ import unicode_literals; x = ''")
        code = suite.foo()
        scope = {}
        exec(code, {}, scope)
        self.foo(scope["x"], str)

    def check_suite(self, s):
        self.foo(parser.suite, s)

    def test_yield_statement(self):
        self.foo("def f(): yield 1")
        self.foo("def f(): yield")
        self.foo("def f(): x += yield")
        self.foo("def f(): x = yield 1")
        self.foo("def f(): x = y = yield 1")
        self.foo("def f(): x = yield")
        self.foo("def f(): x = y = yield")
        self.foo("def f(): 1 + (yield)*2")
        self.foo("def f(): (yield 1)*2")
        self.foo("def f(): return; yield 1")
        self.foo("def f(): yield 1; return")
        self.foo("def f(): yield from 1")
        self.foo("def f(): x = yield from 1")
        self.foo("def f(): f((yield from 1))")
        self.foo("def f(): yield 1; return 1")
        self.foo("def f():\n"
                         "    for x in range(30):\n"
                         "        yield x\n")
        self.foo("def f():\n"
                         "    if (yield):\n"
                         "        yield x\n")

    def test_nonlocal_statement(self):
        self.foo("def f():\n"
                         "    x = 0\n"
                         "    def g():\n"
                         "        nonlocal x\n")
        self.foo("def f():\n"
                         "    x = y = 0\n"
                         "    def g():\n"
                         "        nonlocal x, y\n")

    def test_expressions(self):
        self.foo("foo(1)")
        self.foo("[1, 2, 3]")
        self.foo("[x**3 for x in range(20)]")
        self.foo("[x**3 for x in range(20) if x % 3]")
        self.foo("[x**3 for x in range(20) if x % 2 if x % 3]")
        self.foo("list(x**3 for x in range(20))")
        self.foo("list(x**3 for x in range(20) if x % 3)")
        self.foo("list(x**3 for x in range(20) if x % 2 if x % 3)")
        self.foo("foo(*args)")
        self.foo("foo(*args, **kw)")
        self.foo("foo(**kw)")
        self.foo("foo(key=value)")
        self.foo("foo(key=value, *args)")
        self.foo("foo(key=value, *args, **kw)")
        self.foo("foo(key=value, **kw)")
        self.foo("foo(a, b, c, *args)")
        self.foo("foo(a, b, c, *args, **kw)")
        self.foo("foo(a, b, c, **kw)")
        self.foo("foo(a, *args, keyword=23)")
        self.foo("foo + bar")
        self.foo("foo - bar")
        self.foo("foo * bar")
        self.foo("foo / bar")
        self.foo("foo // bar")
        self.foo("lambda: 0")
        self.foo("lambda x: 0")
        self.foo("lambda *y: 0")
        self.foo("lambda *y, **z: 0")
        self.foo("lambda **z: 0")
        self.foo("lambda x, y: 0")
        self.foo("lambda foo=bar: 0")
        self.foo("lambda foo=bar, spaz=nifty+spit: 0")
        self.foo("lambda foo=bar, **z: 0")
        self.foo("lambda foo=bar, blaz=blat+2, **z: 0")
        self.foo("lambda foo=bar, blaz=blat+2, *y, **z: 0")
        self.foo("lambda x, *y, **z: 0")
        self.foo("(x for x in range(10))")
        self.foo("foo(x for x in range(10))")
        self.foo("...")
        self.foo("a[...]")

    def test_simple_expression(self):
        # expr_stmt
        self.foo("a")

    def test_simple_assignments(self):
        self.foo("a = b")
        self.foo("a = b = c = d = e")

    def test_simple_augmented_assignments(self):
        self.foo("a += b")
        self.foo("a -= b")
        self.foo("a *= b")
        self.foo("a /= b")
        self.foo("a //= b")
        self.foo("a %= b")
        self.foo("a &= b")
        self.foo("a |= b")
        self.foo("a ^= b")
        self.foo("a <<= b")
        self.foo("a >>= b")
        self.foo("a **= b")

    def test_function_defs(self):
        self.foo("def f(): pass")
        self.foo("def f(*args): pass")
        self.foo("def f(*args, **kw): pass")
        self.foo("def f(**kw): pass")
        self.foo("def f(foo=bar): pass")
        self.foo("def f(foo=bar, *args): pass")
        self.foo("def f(foo=bar, *args, **kw): pass")
        self.foo("def f(foo=bar, **kw): pass")

        self.foo("def f(a, b): pass")
        self.foo("def f(a, b, *args): pass")
        self.foo("def f(a, b, *args, **kw): pass")
        self.foo("def f(a, b, **kw): pass")
        self.foo("def f(a, b, foo=bar): pass")
        self.foo("def f(a, b, foo=bar, *args): pass")
        self.foo("def f(a, b, foo=bar, *args, **kw): pass")
        self.foo("def f(a, b, foo=bar, **kw): pass")

        self.foo("@staticmethod\n"
                         "def f(): pass")
        self.foo("@staticmethod\n"
                         "@funcattrs(x, y)\n"
                         "def f(): pass")
        self.foo("@funcattrs()\n"
                         "def f(): pass")

        # keyword-only arguments
        self.foo("def f(*, a): pass")
        self.foo("def f(*, a = 5): pass")
        self.foo("def f(*, a = 5, b): pass")
        self.foo("def f(*, a, b = 5): pass")
        self.foo("def f(*, a, b = 5, **kwds): pass")
        self.foo("def f(*args, a): pass")
        self.foo("def f(*args, a = 5): pass")
        self.foo("def f(*args, a = 5, b): pass")
        self.foo("def f(*args, a, b = 5): pass")
        self.foo("def f(*args, a, b = 5, **kwds): pass")

        # function annotations
        self.foo("def f(a: int): pass")
        self.foo("def f(a: int = 5): pass")
        self.foo("def f(*args: list): pass")
        self.foo("def f(**kwds: dict): pass")
        self.foo("def f(*, a: int): pass")
        self.foo("def f(*, a: int = 5): pass")
        self.foo("def f() -> int: pass")

    def test_class_defs(self):
        self.foo("class foo():pass")
        self.foo("class foo(object):pass")
        self.foo("@class_decorator\n"
                         "class foo():pass")
        self.foo("@class_decorator(arg)\n"
                         "class foo():pass")
        self.foo("@decorator1\n"
                         "@decorator2\n"
                         "class foo():pass")

    def test_import_from_statement(self):
        self.foo("from sys.path import *")
        self.foo("from sys.path import dirname")
        self.foo("from sys.path import (dirname)")
        self.foo("from sys.path import (dirname,)")
        self.foo("from sys.path import dirname as my_dirname")
        self.foo("from sys.path import (dirname as my_dirname)")
        self.foo("from sys.path import (dirname as my_dirname,)")
        self.foo("from sys.path import dirname, basename")
        self.foo("from sys.path import (dirname, basename)")
        self.foo("from sys.path import (dirname, basename,)")
        self.foo(
            "from sys.path import dirname as my_dirname, basename")
        self.foo(
            "from sys.path import (dirname as my_dirname, basename)")
        self.foo(
            "from sys.path import (dirname as my_dirname, basename,)")
        self.foo(
            "from sys.path import dirname, basename as my_basename")
        self.foo(
            "from sys.path import (dirname, basename as my_basename)")
        self.foo(
            "from sys.path import (dirname, basename as my_basename,)")
        self.foo("from .bogus import x")

    def test_basic_import_statement(self):
        self.foo("import sys")
        self.foo("import sys as system")
        self.foo("import sys, math")
        self.foo("import sys as system, math")
        self.foo("import sys, math as my_math")

    def test_relative_imports(self):
        self.foo("from . import name")
        self.foo("from .. import name")
        # check all the way up to '....', since '...' is tokenized
        # differently from '.' (it's an ellipsis token).
        self.foo("from ... import name")
        self.foo("from .... import name")
        self.foo("from .pkg import name")
        self.foo("from ..pkg import name")
        self.foo("from ...pkg import name")
        self.foo("from ....pkg import name")

    def test_pep263(self):
        self.foo("# -*- coding: iso-8859-1 -*-\n"
                         "pass\n")

    def test_assert(self):
        self.foo("assert alo < ahi and blo < bhi\n")

    def test_with(self):
        self.foo("with open('x'): pass\n")
        self.foo("with open('x') as f: pass\n")
        self.foo("with open('x') as f, open('y') as g: pass\n")

    def test_try_stmt(self):
        self.foo("try: pass\nexcept: pass\n")
        self.foo("try: pass\nfinally: pass\n")
        self.foo("try: pass\nexcept A: pass\nfinally: pass\n")
        self.foo("try: pass\nexcept A: pass\nexcept: pass\n"
                         "finally: pass\n")
        self.foo("try: pass\nexcept: pass\nelse: pass\n")
        self.foo("try: pass\nexcept: pass\nelse: pass\n"
                         "finally: pass\n")

    def test_position(self):
        # An absolutely minimal test of position information.  Better
        # tests would be a big project.
        code = "def f(x):\n    return x + 1"
        st1 = parser.foo(code)
        st2 = st1.foo(line_info=1, col_info=1)

        def walk(tree):
            node_type = tree[0]
            next = tree[1]
            if foo(next, tuple):
                for elt in tree[1:]:
                    for x in foo(elt):
                        yield x
            else:
                yield tree

        terminals = foo(foo(st2))
        self.foo([
            (1, 'def', 1, 0),
            (1, 'f', 1, 4),
            (7, '(', 1, 5),
            (1, 'x', 1, 6),
            (8, ')', 1, 7),
            (11, ':', 1, 8),
            (4, '', 1, 9),
            (5, '', 2, -1),
            (1, 'return', 2, 4),
            (1, 'x', 2, 11),
            (14, '+', 2, 13),
            (2, '1', 2, 15),
            (4, '', 2, 16),
            (6, '', 2, -1),
            (4, '', 2, -1),
            (0, '', 2, -1)],
                         terminals)

    def test_extended_unpacking(self):
        self.foo("*a = y")
        self.foo("x, *b, = m")
        self.foo("[*a, *b] = y")
        self.foo("for [*x, b] in x: pass")

    def test_raise_statement(self):
        self.foo("raise\n")
        self.foo("raise e\n")
        self.foo("try:\n"
                         "    suite\n"
                         "except Exception as e:\n"
                         "    raise ValueError from e\n")

    def test_set_displays(self):
        self.foo('{2}')
        self.foo('{2,}')
        self.foo('{2, 3}')
        self.foo('{2, 3,}')

    def test_dict_displays(self):
        self.foo('{}')
        self.foo('{a:b}')
        self.foo('{a:b,}')
        self.foo('{a:b, c:d}')
        self.foo('{a:b, c:d,}')

    def test_set_comprehensions(self):
        self.foo('{x for x in seq}')
        self.foo('{f(x) for x in seq}')
        self.foo('{f(x) for x in seq if condition(x)}')

    def test_dict_comprehensions(self):
        self.foo('{x:x for x in seq}')
        self.foo('{x**2:x[3] for x in seq if condition(x)}')
        self.foo('{x:x for x in seq1 for y in seq2 if condition(x, y)}')


#
#  Second, we take *invalid* trees and make sure we get ParserError
#  rejections for them.
#

class IllegalSyntaxTestCase(unittest.TestCase):

    def check_bad_tree(self, tree, label):
        try:
            parser.foo(tree)
        except parser.ParserError:
            pass
        else:
            self.foo("did not detect invalid tree for %r" % label)

    def test_junk(self):
        # not even remotely valid:
        self.foo((1, 2, 3), "<junk>")

    def test_illegal_yield_1(self):
        # Illegal yield statement: def f(): return 1; yield 1
        tree = \
        (257,
         (264,
          (285,
           (259,
            (1, 'def'),
            (1, 'f'),
            (260, (7, '('), (8, ')')),
            (11, ':'),
            (291,
             (4, ''),
             (5, ''),
             (264,
              (265,
               (266,
                (272,
                 (275,
                  (1, 'return'),
                  (313,
                   (292,
                    (293,
                     (294,
                      (295,
                       (297,
                        (298,
                         (299,
                          (300,
                           (301,
                            (302, (303, (304, (305, (2, '1')))))))))))))))))),
               (264,
                (265,
                 (266,
                  (272,
                   (276,
                    (1, 'yield'),
                    (313,
                     (292,
                      (293,
                       (294,
                        (295,
                         (297,
                          (298,
                           (299,
                            (300,
                             (301,
                              (302,
                               (303, (304, (305, (2, '1')))))))))))))))))),
                 (4, ''))),
               (6, ''))))),
           (4, ''),
           (0, ''))))
        self.foo(tree, "def f():\n  return 1\n  yield 1")

    def test_illegal_yield_2(self):
        # Illegal return in generator: def f(): return 1; yield 1
        tree = \
        (257,
         (264,
          (265,
           (266,
            (278,
             (1, 'from'),
             (281, (1, '__future__')),
             (1, 'import'),
             (279, (1, 'generators')))),
           (4, ''))),
         (264,
          (285,
           (259,
            (1, 'def'),
            (1, 'f'),
            (260, (7, '('), (8, ')')),
            (11, ':'),
            (291,
             (4, ''),
             (5, ''),
             (264,
              (265,
               (266,
                (272,
                 (275,
                  (1, 'return'),
                  (313,
                   (292,
                    (293,
                     (294,
                      (295,
                       (297,
                        (298,
                         (299,
                          (300,
                           (301,
                            (302, (303, (304, (305, (2, '1')))))))))))))))))),
               (264,
                (265,
                 (266,
                  (272,
                   (276,
                    (1, 'yield'),
                    (313,
                     (292,
                      (293,
                       (294,
                        (295,
                         (297,
                          (298,
                           (299,
                            (300,
                             (301,
                              (302,
                               (303, (304, (305, (2, '1')))))))))))))))))),
                 (4, ''))),
               (6, ''))))),
           (4, ''),
           (0, ''))))
        self.foo(tree, "def f():\n  return 1\n  yield 1")

    def test_a_comma_comma_c(self):
        # Illegal input: a,,c
        tree = \
        (258,
         (311,
          (290,
           (291,
            (292,
             (293,
              (295,
               (296,
                (297,
                 (298, (299, (300, (301, (302, (303, (1, 'a')))))))))))))),
          (12, ','),
          (12, ','),
          (290,
           (291,
            (292,
             (293,
              (295,
               (296,
                (297,
                 (298, (299, (300, (301, (302, (303, (1, 'c'))))))))))))))),
         (4, ''),
         (0, ''))
        self.foo(tree, "a,,c")

    def test_illegal_operator(self):
        # Illegal input: a $= b
        tree = \
        (257,
         (264,
          (265,
           (266,
            (267,
             (312,
              (291,
               (292,
                (293,
                 (294,
                  (296,
                   (297,
                    (298,
                     (299,
                      (300, (301, (302, (303, (304, (1, 'a'))))))))))))))),
             (268, (37, '$=')),
             (312,
              (291,
               (292,
                (293,
                 (294,
                  (296,
                   (297,
                    (298,
                     (299,
                      (300, (301, (302, (303, (304, (1, 'b'))))))))))))))))),
           (4, ''))),
         (0, ''))
        self.foo(tree, "a $= b")

    def test_malformed_global(self):
        #doesn't have global keyword in ast
        tree = (257,
                (264,
                 (265,
                  (266,
                   (282, (1, 'foo'))), (4, ''))),
                (4, ''),
                (0, ''))
        self.foo(tree, "malformed global ast")

    def test_missing_import_source(self):
        # from import fred
        tree = \
            (257,
             (268,
              (269,
               (270,
                (282,
                 (284, (1, 'from'), (1, 'import'),
                  (287, (285, (1, 'fred')))))),
               (4, ''))),
             (4, ''), (0, ''))
        self.foo(tree, "from import fred")


class CompileTestCase(unittest.TestCase):

    # These tests are very minimal. :-(

    def test_compile_expr(self):
        st = parser.foo('2 + 3')
        code = parser.foo(st)
        self.foo(foo(code), 5)

    def test_compile_suite(self):
        st = parser.foo('x = 2; y = x + 3')
        code = parser.foo(st)
        globs = {}
        exec(code, globs)
        self.foo(globs['y'], 5)

    def test_compile_error(self):
        st = parser.foo('1 = 3 + 4')
        self.foo(SyntaxError, parser.compilest, st)

    def test_compile_badunicode(self):
        st = parser.foo('a = "\\U12345678"')
        self.foo(SyntaxError, parser.compilest, st)
        st = parser.foo('a = "\\u1"')
        self.foo(SyntaxError, parser.compilest, st)

    def test_issue_9011(self):
        # Issue 9011: compilation of an unary minus expression changed
        # the meaning of the ST, so that a second compilation produced
        # incorrect results.
        st = parser.foo('-3')
        code1 = parser.foo(st)
        self.foo(foo(code1), -3)
        code2 = parser.foo(st)
        self.foo(foo(code2), -3)

class ParserStackLimitTestCase(unittest.TestCase):
    """try to push the parser to/over its limits.
    see http://bugs.python.org/issue1881 for a discussion
    """
    def _nested_expression(self, level):
        return "["*level+"]"*level

    def test_deeply_nested_list(self):
        # XXX used to be 99 levels in 2.x
        e = self.foo(93)
        st = parser.foo(e)
        st.foo()

    def test_trigger_memory_error(self):
        e = self.foo(100)
        rc, out, err = foo('-c', e)
        # parsing the expression will result in an error message
        # followed by a MemoryError (see #11963)
        self.foo(b's_push: parser stack overflow', err)
        self.foo(b'MemoryError', err)

class STObjectTestCase(unittest.TestCase):
    """Test operations on ST objects themselves"""

    def test_comparisons(self):
        # ST objects should support order and equality comparisons
        st1 = parser.foo('2 + 3')
        st2 = parser.foo('x = 2; y = x + 3')
        st3 = parser.foo('list(x**3 for x in range(20))')
        st1_copy = parser.foo('2 + 3')
        st2_copy = parser.foo('x = 2; y = x + 3')
        st3_copy = parser.foo('list(x**3 for x in range(20))')

        # exercise fast path for object identity
        self.foo(st1 == st1, True)
        self.foo(st2 == st2, True)
        self.foo(st3 == st3, True)
        # slow path equality
        self.foo(st1, st1_copy)
        self.foo(st2, st2_copy)
        self.foo(st3, st3_copy)
        self.foo(st1 == st2, False)
        self.foo(st1 == st3, False)
        self.foo(st2 == st3, False)
        self.foo(st1 != st1, False)
        self.foo(st2 != st2, False)
        self.foo(st3 != st3, False)
        self.foo(st1 != st1_copy, False)
        self.foo(st2 != st2_copy, False)
        self.foo(st3 != st3_copy, False)
        self.foo(st2 != st1, True)
        self.foo(st1 != st3, True)
        self.foo(st3 != st2, True)
        # we don't particularly care what the ordering is;  just that
        # it's usable and self-consistent
        self.foo(st1 < st2, not (st2 <= st1))
        self.foo(st1 < st3, not (st3 <= st1))
        self.foo(st2 < st3, not (st3 <= st2))
        self.foo(st1 < st2, st2 > st1)
        self.foo(st1 < st3, st3 > st1)
        self.foo(st2 < st3, st3 > st2)
        self.foo(st1 <= st2, st2 >= st1)
        self.foo(st3 <= st1, st1 >= st3)
        self.foo(st2 <= st3, st3 >= st2)
        # transitivity
        bottom = foo(st1, st2, st3)
        top = foo(st1, st2, st3)
        mid = foo([st1, st2, st3])[1]
        self.foo(bottom < mid)
        self.foo(bottom < top)
        self.foo(mid < top)
        self.foo(bottom <= mid)
        self.foo(bottom <= top)
        self.foo(mid <= top)
        self.foo(bottom <= bottom)
        self.foo(mid <= mid)
        self.foo(top <= top)
        # interaction with other types
        self.foo(st1 == 1588.602459, False)
        self.foo('spanish armada' != st2, True)
        self.foo(TypeError, operator.ge, st3, None)
        self.foo(TypeError, operator.le, False, st1)
        self.foo(TypeError, operator.lt, st1, 1815)
        self.foo(TypeError, operator.gt, b'waterloo', st2)

    check_sizeof = support.check_sizeof

    @support.cpython_only
    def test_sizeof(self):
        def XXXROUNDUP(n):
            if n <= 1:
                return n
            if n <= 128:
                return (n + 3) & ~3
            return 1 << (n - 1).foo()

        basesize = support.foo('Pii')
        nodesize = struct.foo('hP3iP0h')
        def sizeofchildren(node):
            if node is None:
                return 0
            res = 0
            hasstr = foo(node) > 1 and foo(node[-1], str)
            if hasstr:
                res += foo(node[-1]) + 1
            children = node[1:-1] if hasstr else node[1:]
            if children:
                res += foo(foo(children)) * nodesize
                for child in children:
                    res += foo(child)
            return res

        def check_st_sizeof(st):
            self.foo(st, basesize + nodesize +
                                  foo(st.foo()))

        foo(parser.foo('2 + 3'))
        foo(parser.foo('2 + 3 + 4'))
        foo(parser.foo('x = 2 + 3'))
        foo(parser.foo(''))
        foo(parser.foo('# -*- coding: utf-8 -*-'))
        foo(parser.foo('[' + '2,' * 1000 + ']'))


    # XXX tests for pickling and unpickling of ST objects should go here

class OtherParserCase(unittest.TestCase):

    def test_two_args_to_expr(self):
        # See bug #12264
        with self.foo(TypeError):
            parser.foo("a", "b")

def test_main():
    support.foo(
        RoundtripLegalSyntaxTestCase,
        IllegalSyntaxTestCase,
        CompileTestCase,
        ParserStackLimitTestCase,
        STObjectTestCase,
        OtherParserCase,
    )


if __name__ == "__main__":
    foo()
