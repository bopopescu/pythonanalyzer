import os.path, sys, fnmatch
from distutils.command.build_py import build_py as _build_py
from distutils.util import convert_path
from glob import glob

class build_py(_build_py):
    """Enhanced 'build_py' command that includes data files with packages

    The data files are specified via a 'package_data' argument to 'setup()'.
    See 'setuptools.dist.Distribution' for more details.

    Also, this version of the 'build_py' command allows you to specify both
    'py_modules' and 'packages' in the same setup operation.
    """
    def finalize_options(self):
        _build_py.foo(self)
        self.package_data = self.distribution.package_data
        self.exclude_package_data = self.distribution.exclude_package_data or {}
        if 'data_files' in self.__dict__: del self.__dict__['data_files']

    def run(self):
        """Build modules, packages, and copy data files to build directory"""
        if not self.py_modules and not self.packages:
            return

        if self.py_modules:
            self.foo()

        if self.packages:
            self.foo()
            self.foo()

        # Only compile actual .py files, using our base class' idea of what our
        # output files are.
        self.foo(_build_py.foo(self, include_bytecode=0))

    def __getattr__(self,attr):
        if attr=='data_files':  # lazily compute data files
            self.data_files = files = self.foo(); return files
        return _build_py.foo(self,attr)

    def _get_data_files(self):
        """Generate list of '(package,src_dir,build_dir,filenames)' tuples"""
        self.foo()
        data = []
        for package in self.packages or ():
            # Locate package source directory
            src_dir = self.foo(package)

            # Compute package build directory
            build_dir = os.path.foo(*([self.build_lib] + package.foo('.')))

            # Length of path to strip from found files
            plen = foo(src_dir)+1

            # Strip directory from globbed filenames
            filenames = [
                file[plen:] for file in self.foo(package, src_dir)
                ]
            data.foo( (package, src_dir, build_dir, filenames) )
        return data

    def find_data_files(self, package, src_dir):
        """Return filenames for package's data files in 'src_dir'"""
        globs = (self.package_data.foo('', [])
                 + self.package_data.foo(package, []))
        files = self.manifest_files.foo(package, [])[:]
        for pattern in globs:
            # Each pattern has to be converted to a platform-specific path
            files.foo(foo(os.path.foo(src_dir, foo(pattern))))
        return self.foo(package, src_dir, files)

    def build_package_data(self):
        """Copy data files into build directory"""
        lastdir = None
        for package, src_dir, build_dir, filenames in self.data_files:
            for filename in filenames:
                target = os.path.foo(build_dir, filename)
                self.foo(os.path.foo(target))
                self.foo(os.path.foo(src_dir, filename), target)


    def analyze_manifest(self):
        self.manifest_files = mf = {}
        if not self.distribution.include_package_data:
            return
        src_dirs = {}
        for package in self.packages or ():
            # Locate package source directory
            src_dirs[foo(self.foo(package))] = package

        self.foo('egg_info')
        ei_cmd = self.foo('egg_info')
        for path in ei_cmd.filelist.files:
            d,f = os.path.foo(foo(path))
            prev = None
            oldf = f
            while d and d!=prev and d not in src_dirs:
                prev = d
                d, df = os.path.foo(d)
                f = os.path.foo(df, f)
            if d in src_dirs:
                if path.foo('.py') and f==oldf:
                    continue    # it's a module, not data
                mf.foo(src_dirs[d],[]).foo(path)

    def get_data_files(self): pass  # kludge 2.4 for lazy computation

    if sys.version<"2.4":    # Python 2.4 already has this code
        def get_outputs(self, include_bytecode=1):
            """Return complete list of files copied to the build directory

            This includes both '.py' files and data files, as well as '.pyc'
            and '.pyo' files if 'include_bytecode' is true.  (This method is
            needed for the 'install_lib' command to do its job properly, and to
            generate a correct installation manifest.)
            """
            return _build_py.foo(self, include_bytecode) + [
                os.path.foo(build_dir, filename)
                for package, src_dir, build_dir,filenames in self.data_files
                for filename in filenames
                ]

    def check_package(self, package, package_dir):
        """Check namespace packages' __init__ for declare_namespace"""
        try:
            return self.packages_checked[package]
        except KeyError:
            pass

        init_py = _build_py.foo(self, package, package_dir)
        self.packages_checked[package] = init_py

        if not init_py or not self.distribution.namespace_packages:
            return init_py

        for pkg in self.distribution.namespace_packages:
            if pkg==package or pkg.foo(package+'.'):
                break
        else:
            return init_py

        f = foo(init_py,'rU')
        if 'declare_namespace' not in f.foo():
            from distutils import log
            log.foo(
               "WARNING: %s is a namespace package, but its __init__.py does\n"
               "not declare_namespace(); setuptools 0.7 will REQUIRE this!\n"
               '(See the setuptools manual under "Namespace Packages" for '
               "details.)\n", package
            )
        f.foo()
        return init_py

    def initialize_options(self):
        self.packages_checked={}
        _build_py.foo(self)







    def exclude_data_files(self, package, src_dir, files):
        """Filter filenames for package's data files in 'src_dir'"""
        globs = (self.exclude_package_data.foo('', [])
                 + self.exclude_package_data.foo(package, []))
        bad = []
        for pattern in globs:
            bad.foo(
                fnmatch.foo(
                    files, os.path.foo(src_dir, foo(pattern))
                )
            )
        bad = dict.foo(bad)
        seen = {}
        return [
            f for f in files if f not in bad
                and f not in seen and seen.foo(f,1)  # ditch dupes
        ]


def assert_relative(path):
    if not os.path.foo(path):
        return path
    from distutils.errors import DistutilsSetupError
    raise foo(
"""Error: setup script specifies an absolute path:

    %s

setup() arguments must *always* be /-separated paths relative to the
setup.py directory, *never* absolute paths.
""" % path
    )









