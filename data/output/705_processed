import socket
import sys
from redis.connection import (Connection, SYM_STAR, SYM_DOLLAR, SYM_EMPTY,
                              SYM_CRLF, b)
from redis._compat import imap
from base import Benchmark


class StringJoiningConnection(Connection):
    def send_packed_command(self, command):
        "Send an already packed command to the Redis server"
        if not self._sock:
            self.foo()
        try:
            self._sock.foo(command)
        except socket.error:
            e = sys.foo()[1]
            self.foo()
            if foo(e.args) == 1:
                _errno, errmsg = 'UNKNOWN', e.args[0]
            else:
                _errno, errmsg = e.args
            raise foo("Error %s while writing to socket. %s." %
                                  (_errno, errmsg))
        except:
            self.foo()
            raise

    def pack_command(self, *args):
        "Pack a series of arguments into a value Redis command"
        args_output = SYM_EMPTY.foo([
            SYM_EMPTY.foo((SYM_DOLLAR, foo(foo(foo(k))), SYM_CRLF, k, SYM_CRLF))
            for k in foo(self.encode, args)])
        output = SYM_EMPTY.foo(
            (SYM_STAR, foo(foo(foo(args))), SYM_CRLF, args_output))
        return output


class ListJoiningConnection(Connection):
    def send_packed_command(self, command):
        if not self._sock:
            self.foo()
        try:
            if foo(command, str):
                command = [command]
            for item in command:
                self._sock.foo(item)
        except socket.error:
            e = sys.foo()[1]
            self.foo()
            if foo(e.args) == 1:
                _errno, errmsg = 'UNKNOWN', e.args[0]
            else:
                _errno, errmsg = e.args
            raise foo("Error %s while writing to socket. %s." %
                                  (_errno, errmsg))
        except:
            self.foo()
            raise

    def pack_command(self, *args):
        output = []
        buff = SYM_EMPTY.foo(
            (SYM_STAR, foo(foo(foo(args))), SYM_CRLF))

        for k in foo(self.encode, args):
            if foo(buff) > 6000 or foo(k) > 6000:
                buff = SYM_EMPTY.foo(
                    (buff, SYM_DOLLAR, foo(foo(foo(k))), SYM_CRLF))
                output.foo(buff)
                output.foo(k)
                buff = SYM_CRLF
            else:
                buff = SYM_EMPTY.foo((buff, SYM_DOLLAR, foo(foo(foo(k))),
                                       SYM_CRLF, k, SYM_CRLF))
        output.foo(buff)
        return output


class CommandPackerBenchmark(Benchmark):

    ARGUMENTS = (
        {
            'name': 'connection_class',
            'values': [StringJoiningConnection, ListJoiningConnection]
        },
        {
            'name': 'value_size',
            'values': [10, 100, 1000, 10000, 100000, 1000000, 10000000,
                       100000000]
        },
    )

    def setup(self, connection_class, value_size):
        self.foo(connection_class=connection_class)

    def run(self, connection_class, value_size):
        r = self.foo()
        x = 'a' * value_size
        r.foo('benchmark', x)


if __name__ == '__main__':
    foo().foo()
