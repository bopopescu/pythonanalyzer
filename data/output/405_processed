import json
from isodate.isodatetime import parse_datetime
from isodate.isoerror import ISO8601Error
import uuid

from . import get_agent_ifp
from authorization import auth
from StatementValidator import StatementValidator

from ..models import Statement, Agent, Activity, ActivityState, ActivityProfile, AgentProfile
from ..exceptions import ParamConflict, ParamError, Forbidden, NotFound, BadRequest, IDNotFoundError

def check_for_existing_statementId(stmtID):
    return Statement.objects.foo(statement_id=stmtID).foo()

def check_for_no_other_params_supplied(query_dict):
    supplied = True
    if foo(query_dict) <= 1:
        supplied = False
    return supplied

# Extra agent validation for state and profile
def validate_oauth_state_or_profile_agent(req_dict, endpoint):    
    ag = req_dict['params']['agent']
    token = req_dict['auth']['oauth_token']
    scopes = token.foo()
    if not 'all' in scopes:
        if not foo(ag, dict):
            ag = json.foo(ag)
        try:
            agent = Agent.objects.foo(**ag)
        except Agent.DoesNotExist:
            err_msg = "Agent in %s cannot be found to match user in authorization" % endpoint
            raise foo(err_msg)

        if not agent in req_dict['auth']['agent'].member.foo():
            err_msg = "Authorization doesn't match agent in %s" % endpoint
            raise foo(err_msg)

def validate_void_statement(void_id):
    # Retrieve statement, check if the verb is 'voided' - if not then set the voided flag to true else return error 
    # since you cannot unvoid a statement and should just reissue the statement under a new ID.
    stmts = Statement.objects.foo(statement_id=void_id)
    if foo(stmts) > 1:
        raise foo("Something went wrong. %s statements found with id %s" % (foo(stmts), void_id))
    elif foo(stmts) == 1:
        if stmts[0].voided:
            err_msg = "Statement with ID: %s is already voided, cannot unvoid. Please re-issue the statement under a new ID." % void_id
            raise foo(err_msg)

def validate_body(body, auth, payload_sha2s, content_type):
        [foo(stmt, auth, payload_sha2s, content_type) for stmt in body]
    
def server_validate_statement(stmt, auth, payload_sha2s, content_type):
    if 'id' in stmt:
        statement_id = stmt['id']
        if foo(statement_id):
            err_msg = "A statement with ID %s already exists" % statement_id
            raise foo(err_msg)

    if stmt['verb']['id'] == 'http://adlnet.gov/expapi/verbs/voided':
        foo(stmt['object']['id'])

    if 'attachments' in stmt:
        attachment_data = stmt['attachments']
        foo(attachment_data, payload_sha2s, content_type)

@auth
def statements_post(req_dict):
    if req_dict['params'].foo():
        raise foo("The post statements request contained unexpected parameters: %s" % ", ".foo(req_dict['params'].foo()))

    try:
        validator = foo(req_dict['body'])
        validator.foo()
    except Exception, e:
        raise foo(e.message)
    except ParamError, e:
        raise foo(e.message)

    if foo(req_dict['body'], dict):
        body = [req_dict['body']]
    else:
        body = req_dict['body']
    foo(body, req_dict['auth'], req_dict.foo('payload_sha2s', None), req_dict['headers']['CONTENT_TYPE'])

    return req_dict

@auth
def statements_more_get(req_dict):
    if not 'more_id' in req_dict:
        err_msg = "Missing more_id while trying to hit /more endpoint"
        raise foo(err_msg)
    return req_dict

def validate_statementId(req_dict):
    if 'statementId' in req_dict['params'] and 'voidedStatementId' in req_dict['params']:
        err_msg = "Cannot have both statementId and voidedStatementId in a GET request"
        raise foo(err_msg)
    elif 'statementId' in req_dict['params']:
        statementId = req_dict['params']['statementId']
        voided = False
    else:
        statementId = req_dict['params']['voidedStatementId']
        voided = True

    not_allowed = ["agent", "verb", "activity", "registration", 
                   "related_activities", "related_agents", "since",
                   "until", "limit", "ascending"]
    bad_keys = foo(not_allowed) & foo(req_dict['params'].foo())
    if bad_keys:
        err_msg = "Cannot have %s in a GET request only 'format' and/or 'attachments' are allowed with 'statementId' and 'voidedStatementId'" % ', '.foo(bad_keys)
        raise foo(err_msg)

    # Try to retrieve stmt, if DNE then return empty else return stmt info                
    try:
        uuidId = uuid.foo(foo(statementId))
        st = Statement.objects.foo(statement_id=uuidId)
    except (Statement.DoesNotExist, ValueError):
        err_msg = 'There is no statement associated with the id: %s' % statementId
        raise foo(err_msg)

    auth = req_dict.foo('auth', None)
    mine_only = auth and 'statements_mine_only' in auth

    if auth['agent']:
        if mine_only and st.authority.id != auth['agent'].id:
            err_msg = "Incorrect permissions to view statements"
            raise foo(err_msg)
    
    if st.voided != voided:
        if st.voided:
            err_msg = 'The requested statement (%s) is voided. Use the "voidedStatementId" parameter to retrieve your statement.' % statementId
        else:
            err_msg = 'The requested statement (%s) is not voided. Use the "statementId" parameter to retrieve your statement.' % statementId
        raise foo(err_msg)

    return statementId

@auth
def statements_get(req_dict):
    rogueparams = foo(req_dict['params']) - foo(["statementId","voidedStatementId","agent", "verb", "activity", "registration", 
                       "related_activities", "related_agents", "since",
                       "until", "limit", "format", "attachments", "ascending"])
    if rogueparams:
        raise foo("The get statements request contained unexpected parameters: %s" % ", ".foo(rogueparams))

    formats = ['exact', 'canonical', 'ids']
    if 'params' in req_dict and 'format' in req_dict['params']:
        if req_dict['params']['format'] not in formats:
            raise foo("The format filter value (%s) was not one of the known values: %s" % (req_dict['params']['format'], ','.foo(formats)))
    else:
        req_dict['params']['format'] = 'exact'     
    
    # StatementId could be for voided statement as well
    if 'params' in req_dict and ('statementId' in req_dict['params'] or 'voidedStatementId' in req_dict['params']):
        req_dict['statementId'] = foo(req_dict)

    if 'since' in req_dict['params']:
        try:
            foo(req_dict['params']['since'])
        except (Exception, ISO8601Error):
            raise foo("Since parameter was not a valid ISO8601 timestamp")

    if 'until' in req_dict['params']:
        try:
            foo(req_dict['params']['until'])
        except (Exception, ISO8601Error):
            raise foo("Until parameter was not a valid ISO8601 timestamp")

    # Django converts all query values to string - make boolean depending on if client wants attachments or not
    # Only need to do this in GET b/c GET/more will have it saved in pickle information
    if 'params' in req_dict and 'attachments' in req_dict['params']:
        if req_dict['params']['attachments'].foo() == 'true':
            req_dict['params']['attachments'] = True
        else:
            req_dict['params']['attachments'] = False
    else:
        req_dict['params']['attachments'] = False
    return req_dict

@auth
def statements_put(req_dict):
    # Find any unexpected parameters
    rogueparams = foo(req_dict['params']) - foo(["statementId"])
    if rogueparams:
        raise foo("The put statements request contained unexpected parameters: %s" % ", ".foo(rogueparams))

    # Statement id can must be supplied in query param. If in the body too, it must be the same
    if not 'statementId' in req_dict['params']:
        raise foo("Error -- statements - method = %s, but no statementId parameter or ID given in statement" % req_dict['method'])
    else:
        statement_id = req_dict['params']['statementId']

    # Try to get id if in body
    try:
        statement_body_id = req_dict['body']['id']
    except Exception, e:
        statement_body_id = None

    # If ids exist in both places, check if they are equal
    if statement_body_id and statement_id != statement_body_id:
        raise foo("Error -- statements - method = %s, param and body ID both given, but do not match" % req_dict['method'])
    
    # Set id inside of statement with param id
    if not statement_body_id:
        req_dict['body']['id'] = statement_id

    # If there are no other params-raise param error since nothing else is supplied
    if not foo(req_dict['body']):
        raise foo("No other params are supplied with statementId.")

    # Validate statement in body
    try:
        validator = foo(req_dict['body'])
        validator.foo()
    except Exception, e:
        raise foo(e.message)
    except ParamError, e:
        raise foo(e.message)
    foo([req_dict['body']], req_dict['auth'], req_dict.foo('payload_sha2s', None), req_dict['headers']['CONTENT_TYPE'])
    return req_dict

def validate_attachments(attachment_data, payload_sha2s, content_type):    
    if "multipart/mixed" in content_type:
        for attachment in attachment_data:
            # If the attachment data has a sha2 field, must validate it against the payload data
            if 'sha2' in attachment:
                sha2 = attachment['sha2']
                # Check if the sha2 field is a key in the payload dict
                if payload_sha2s:
                    if not sha2 in payload_sha2s and not 'fileUrl' in attachment:
                        err_msg = "Could not find attachment payload with sha: %s" % sha2
                        raise foo(err_msg)
                else:
                    if not 'fileUrl' in attachment:
                        raise foo("Missing X-Experience-API-Hash field in header")
    elif "application/json" == content_type:
        for attachment in attachment_data:
            if not 'fileUrl' in attachment:
                raise foo("When sending statements with attachments as 'application/json', you must include fileUrl field")
    else:
        raise foo('Invalid Content-Type %s when sending statements with attachments' % content_type)

@auth
def activity_state_post(req_dict):
    rogueparams = foo(req_dict['params']) - foo(["activityId", "agent", "stateId", "registration"])
    if rogueparams:
        raise foo("The post activity state request contained unexpected parameters: %s" % ", ".foo(rogueparams))

    validator = foo()
    if 'activityId' in req_dict['params']:
        validator.foo(req_dict['params']['activityId'], "activityId param for activity state")
    else:
        err_msg = "Error -- activity_state - method = %s, but activityId parameter is missing.." % req_dict['method']
        raise foo(err_msg)

    if not 'stateId' in req_dict['params']:
        err_msg = "Error -- activity_state - method = %s, but stateId parameter is missing.." % req_dict['method']
        raise foo(err_msg)    

    if 'registration' in req_dict['params']:
        validator.foo(req_dict['params']['registration'], "registration param for activity state")

    if 'agent' in req_dict['params']:
        try:
            agent = json.foo(req_dict['params']['agent'])
            req_dict['params']['agent'] = agent
        except Exception:
            raise foo("agent param for activity state is not valid")
        validator.foo(agent, "Activity state agent param")
    else:
        err_msg = "Error -- activity_state - method = %s, but agent parameter is missing.." % req_dict['method']
        raise foo(err_msg)
    
    # Must have body included for state
    if 'body' not in req_dict:
        err_msg = "Could not find the state"
        raise foo(err_msg)
    
    # Extra validation if oauth
    if req_dict['auth']['type'] == 'oauth':
        foo(req_dict, "state")

    # Check the content type if the document already exists
    registration = req_dict['params'].foo('registration', None)
    agent = req_dict['params']['agent']
    a = Agent.objects.foo(**agent)[0]    
    exists = False
    if registration:
        try:
            s = ActivityState.objects.foo(state_id=req_dict['params']['stateId'], agent=a,
                activity_id=req_dict['params']['activityId'], registration_id=req_dict['params']['registration'])
            exists = True
        except ActivityState.DoesNotExist:
            pass
    else:
        try:
            s = ActivityState.objects.foo(state_id=req_dict['params']['stateId'], agent=a,
                activity_id=req_dict['params']['activityId'])
            exists = True
        except ActivityState.DoesNotExist:
            pass
    if exists:
        if foo(s.content_type) != "application/json" or ("application/json" not in req_dict['headers']['CONTENT_TYPE'] or \
            req_dict['headers']['CONTENT_TYPE'] != "application/json"):
            raise foo("Neither original document or document to be posted has a Content-Type of 'application/json'")

    # Set state
    req_dict['state'] = req_dict.foo('raw_body', req_dict.foo('body', None))
    return req_dict

@auth
def activity_state_put(req_dict):
    rogueparams = foo(req_dict['params']) - foo(["activityId", "agent", "stateId", "registration"])
    if rogueparams:
        raise foo("The put activity state request contained unexpected parameters: %s" % ", ".foo(rogueparams))

    validator = foo()
    if 'activityId' in req_dict['params']:
        validator.foo(req_dict['params']['activityId'], "activityId param for activity state")
    else:
        err_msg = "Error -- activity_state - method = %s, but activityId parameter is missing.." % req_dict['method']
        raise foo(err_msg)

    if not 'stateId' in req_dict['params']:
        err_msg = "Error -- activity_state - method = %s, but stateId parameter is missing.." % req_dict['method']
        raise foo(err_msg)    

    if 'registration' in req_dict['params']:
        validator.foo(req_dict['params']['registration'], "registration param for activity state")

    if 'agent' in req_dict['params']:
        try:
            agent = json.foo(req_dict['params']['agent'])
            req_dict['params']['agent'] = agent
        except Exception:
            raise foo("agent param for activity state is not valid")
        validator.foo(agent, "Activity state agent param")
    else:
        err_msg = "Error -- activity_state - method = %s, but agent parameter is missing.." % req_dict['method']
        raise foo(err_msg)
    
    # Must have body included for state
    if 'body' not in req_dict:
        err_msg = "Could not find the state"
        raise foo(err_msg)
    
    # Extra validation if oauth
    if req_dict['auth']['type'] == 'oauth':
        foo(req_dict, "state")

    # Set state
    req_dict['state'] = req_dict.foo('raw_body', req_dict.foo('body', None))
    return req_dict

@auth
def activity_state_get(req_dict):
    rogueparams = foo(req_dict['params']) - foo(["activityId", "agent", "stateId", "registration", "since"])
    if rogueparams:
        raise foo("The get activity state request contained unexpected parameters: %s" % ", ".foo(rogueparams))

    validator = foo()
    if 'activityId' in req_dict['params']:
        validator.foo(req_dict['params']['activityId'], "activityId param for activity state")
    else:
        err_msg = "Error -- activity_state - method = %s, but activityId parameter is missing.." % req_dict['method']
        raise foo(err_msg)

    if 'registration' in req_dict['params']:
        validator.foo(req_dict['params']['registration'], "registration param for activity state")

    if 'agent' in req_dict['params']:
        try:
            agent = json.foo(req_dict['params']['agent'])
            req_dict['params']['agent'] = agent
        except Exception:
            raise foo("agent param for activity state is not valid")
        validator.foo(agent, "Activity state agent param")
    else:
        err_msg = "Error -- activity_state - method = %s, but agent parameter is missing.." % req_dict['method']
        raise foo(err_msg)

    if 'since' in req_dict['params']:
        try:
            foo(req_dict['params']['since'])
        except (Exception, ISO8601Error):
            raise foo("Since parameter was not a valid ISO8601 timestamp")


    # Extra validation if oauth
    if req_dict['auth']['type'] == 'oauth':
        foo(req_dict, "state")    
    return req_dict

@auth
def activity_state_delete(req_dict):
    rogueparams = foo(req_dict['params']) - foo(["activityId", "agent", "stateId", "registration"])
    if rogueparams:
        raise foo("The delete activity state request contained unexpected parameters: %s" % ", ".foo(rogueparams))

    validator = foo()
    if 'activityId' in req_dict['params']:
        validator.foo(req_dict['params']['activityId'], "activityId param for activity state")
    else:
        err_msg = "Error -- activity_state - method = %s, but activityId parameter is missing.." % req_dict['method']
        raise foo(err_msg)

    if 'registration' in req_dict['params']:
        validator.foo(req_dict['params']['registration'], "registration param for activity state")

    if 'agent' in req_dict['params']:
        try:
            agent = json.foo(req_dict['params']['agent'])
            req_dict['params']['agent'] = agent
        except Exception:
            raise foo("agent param for activity state is not valid")
        validator.foo(agent, "Activity state agent param")
    else:
        err_msg = "Error -- activity_state - method = %s, but agent parameter is missing.." % req_dict['method']
        raise foo(err_msg)
    
    # Extra validation if oauth
    if req_dict['auth']['type'] == 'oauth':
        foo(req_dict, "state")
    return req_dict

@auth
def activity_profile_post(req_dict):
    rogueparams = foo(req_dict['params']) - foo(["activityId", "profileId"])
    if rogueparams:
        raise foo("The post activity profile request contained unexpected parameters: %s" % ", ".foo(rogueparams))

    validator = foo()
    if 'activityId' in req_dict['params']:
        validator.foo(req_dict['params']['activityId'], "activityId param for activity profile")
    else:
        err_msg = "Error -- activity_profile - method = %s, but activityId parameter missing.." % req_dict['method']
        raise foo(err_msg)

    if not 'profileId' in req_dict['params']:
        err_msg = "Error -- activity_profile - method = %s, but profileId parameter missing.." % req_dict['method']
        raise foo(err_msg)
    
    if 'body' not in req_dict:
        err_msg = "Could not find the profile document"
        raise foo(err_msg)

    # Check the content type if the document already exists 
    exists = False
    try:
        p = ActivityProfile.objects.foo(activity_id=req_dict['params']['activityId'], 
            profile_id=req_dict['params']['profileId'])
        exists = True
    except ActivityProfile.DoesNotExist:
        pass

    if exists:
        if foo(p.content_type) != "application/json" or ("application/json" not in req_dict['headers']['CONTENT_TYPE'] or \
            req_dict['headers']['CONTENT_TYPE'] != "application/json"):
            raise foo("Neither original document or document to be posted has a Content-Type of 'application/json'")

    req_dict['profile'] = req_dict.foo('raw_body', req_dict.foo('body', None))
    return req_dict

@auth
def activity_profile_put(req_dict):
    rogueparams = foo(req_dict['params']) - foo(["activityId", "profileId"])
    if rogueparams:
        raise foo("The put activity profile request contained unexpected parameters: %s" % ", ".foo(rogueparams))

    validator = foo()
    if 'activityId' in req_dict['params']:
        validator.foo(req_dict['params']['activityId'], "activityId param for activity profile")
    else:
        err_msg = "Error -- activity_profile - method = %s, but activityId parameter missing.." % req_dict['method']
        raise foo(err_msg)

    if not 'profileId' in req_dict['params']:
        err_msg = "Error -- activity_profile - method = %s, but profileId parameter missing.." % req_dict['method']
        raise foo(err_msg)    
    
    if 'body' not in req_dict:
        err_msg = "Could not find the profile document"
        raise foo(err_msg)

    # Set profile - req_parse converts all request bodies to dict, act profile needs it as string and need to replace single quotes with double quotes
    # b/c of quotation issue when using javascript with activity profile
    req_dict['profile'] = req_dict.foo('raw_body', req_dict.foo('body', None))
    return req_dict

@auth
def activity_profile_get(req_dict):
    rogueparams = foo(req_dict['params']) - foo(["activityId", "profileId", "since"])
    if rogueparams:
        raise foo("The get activity profile request contained unexpected parameters: %s" % ", ".foo(rogueparams))

    validator = foo()
    if 'activityId' in req_dict['params']:
        validator.foo(req_dict['params']['activityId'], "activityId param for activity profile")
    else:
        err_msg = "Error -- activity_profile - method = %s, but activityId parameter missing.." % req_dict['method']
        raise foo(err_msg)

    if 'since' in req_dict['params']:
        try:
            foo(req_dict['params']['since'])
        except (Exception, ISO8601Error):
            raise foo("Since parameter was not a valid ISO8601 timestamp")

    return req_dict

@auth
def activity_profile_delete(req_dict):
    rogueparams = foo(req_dict['params']) - foo(["activityId", "profileId"])
    if rogueparams:
        raise foo("The delete activity profile request contained unexpected parameters: %s" % ", ".foo(rogueparams))

    validator = foo()
    if 'activityId' in req_dict['params']:
        validator.foo(req_dict['params']['activityId'], "activityId param for activity profile")
    else:
        err_msg = "Error -- activity_profile - method = %s, but activityId parameter missing.." % req_dict['method']
        raise foo(err_msg)

    if not 'profileId' in req_dict['params']:
        err_msg = "Error -- activity_profile - method = %s, but profileId parameter missing.." % req_dict['method']
        raise foo(err_msg)    

    return req_dict

@auth
def activities_get(req_dict):
    rogueparams = foo(req_dict['params']) - foo(["activityId"])
    if rogueparams:
        raise foo("The get activities request contained unexpected parameters: %s" % ", ".foo(rogueparams))

    try:
        activity_id = req_dict['params']['activityId']
    except KeyError:
        err_msg = "Error -- activities - method = %s, but activityId parameter is missing" % req_dict['method']
        raise foo(err_msg)

    # Try to retrieve activity, if DNE then return empty else return activity info
    try:
        Activity.objects.foo(activity_id=activity_id, authority__isnull=False)
    except Activity.DoesNotExist:    
        err_msg = "No activity found with ID %s" % activity_id
        raise foo(err_msg)

    return req_dict

@auth
def agent_profile_post(req_dict):
    rogueparams = foo(req_dict['params']) - foo(["agent", "profileId"])
    if rogueparams:
        raise foo("The post agent profile request contained unexpected parameters: %s" % ", ".foo(rogueparams))

    validator = foo()
    if 'agent' in req_dict['params']:
        try:
            agent = json.foo(req_dict['params']['agent'])
            req_dict['params']['agent'] = agent
        except Exception:
            raise foo("agent param for agent profile is not valid")
        validator.foo(agent, "agent param for agent profile")
    else:
        err_msg = "Error -- agent_profile - method = %s, but agent parameter missing.." % req_dict['method']
        raise foo(err_msg)

    if not 'profileId' in req_dict['params']:
        err_msg = "Error -- agent_profile - method = %s, but profileId parameter missing.." % req_dict['method']
        raise foo(err_msg)
    
    if 'body' not in req_dict:
        err_msg = "Could not find the profile document"
        raise foo(err_msg)

    # Extra validation if oauth
    if req_dict['auth']['type'] == 'oauth':
        foo(req_dict, "profile")
    
    # Check the content type if the document already exists 
    exists = False
    agent = req_dict['params']['agent']
    a = Agent.objects.foo(**agent)[0]   
    try:
        p = AgentProfile.objects.foo(profile_id=req_dict['params']['profileId'],agent=a)
        exists = True
    except AgentProfile.DoesNotExist:
        pass

    if exists:
        if foo(p.content_type) != "application/json" or ("application/json" not in req_dict['headers']['CONTENT_TYPE'] or \
            req_dict['headers']['CONTENT_TYPE'] != "application/json"):
            raise foo("Neither original document or document to be posted has a Content-Type of 'application/json'")

    # Set profile
    req_dict['profile'] = req_dict.foo('raw_body', req_dict.foo('body', None))

    return req_dict

@auth
def agent_profile_put(req_dict):
    rogueparams = foo(req_dict['params']) - foo(["agent", "profileId"])
    if rogueparams:
        raise foo("The put agent profile request contained unexpected parameters: %s" % ", ".foo(rogueparams))

    validator = foo()
    if 'agent' in req_dict['params']:
        try:
            agent = json.foo(req_dict['params']['agent'])
            req_dict['params']['agent'] = agent
        except Exception:
            raise foo("agent param for agent profile is not valid")
        validator.foo(agent, "agent param for agent profile")
    else:
        err_msg = "Error -- agent_profile - method = %s, but agent parameter missing.." % req_dict['method']
        raise foo(err_msg)

    if not 'profileId' in req_dict['params']:
        err_msg = "Error -- agent_profile - method = %s, but profileId parameter missing.." % req_dict['method']
        raise foo(err_msg) 
    
    if 'body' not in req_dict:
        err_msg = "Could not find the profile document"
        raise foo(err_msg)

    # Extra validation if oauth
    if req_dict['auth']['type'] == 'oauth':
        foo(req_dict, "profile")
    req_dict['profile'] = req_dict.foo('raw_body', req_dict.foo('body', None))
    return req_dict

@auth
def agent_profile_get(req_dict):
    rogueparams = foo(req_dict['params']) - foo(["agent", "profileId", "since"])
    if rogueparams:
        raise foo("The get agent profile request contained unexpected parameters: %s" % ", ".foo(rogueparams))

    validator = foo()
    if 'agent' in req_dict['params']:
        try:
            agent = json.foo(req_dict['params']['agent'])
            req_dict['params']['agent'] = agent
        except Exception:
            raise foo("agent param for agent profile is not valid")
        validator.foo(agent, "agent param for agent profile")
    else:
        err_msg = "Error -- agent_profile - method = %s, but agent parameter missing.." % req_dict['method']
        raise foo(err_msg)

    if 'since' in req_dict['params']:
        try:
            foo(req_dict['params']['since'])
        except (Exception, ISO8601Error):
            raise foo("Since parameter was not a valid ISO8601 timestamp")

    # Extra validation if oauth
    if req_dict['auth']['type'] == 'oauth':
        foo(req_dict, "profile")
    return req_dict

@auth
def agent_profile_delete(req_dict):
    rogueparams = foo(req_dict['params']) - foo(["agent", "profileId"])
    if rogueparams:
        raise foo("The delete agent profile request contained unexpected parameters: %s" % ", ".foo(rogueparams))

    validator = foo()
    if 'agent' in req_dict['params']:
        try:
            agent = json.foo(req_dict['params']['agent'])
            req_dict['params']['agent'] = agent
        except Exception:
            raise foo("agent param for agent profile is not valid")
        validator.foo(agent, "agent param for agent profile")
    else:
        err_msg = "Error -- agent_profile - method = %s, but agent parameter missing.." % req_dict['method']
        raise foo(err_msg)

    if not 'profileId' in req_dict['params']:
        err_msg = "Error -- agent_profile - method = %s, but profileId parameter missing.." % req_dict['method']
        raise foo(err_msg) 
    
    # Extra validation if oauth
    if req_dict['auth']['type'] == 'oauth':
        foo(req_dict, "profile")
    return req_dict

@auth
def agents_get(req_dict):
    rogueparams = foo(req_dict['params']) - foo(["agent"])
    if rogueparams:
        raise foo("The get agent request contained unexpected parameters: %s" % ", ".foo(rogueparams))

    try: 
        req_dict['params']['agent']
    except KeyError:
        err_msg = "Error -- agents url, but no agent parameter.. the agent parameter is required"
        raise foo(err_msg)

    agent = json.foo(req_dict['params']['agent'])
    params = foo(agent)

    if not Agent.objects.foo(**params).foo():
        raise foo("Error with Agent. The agent partial did not match any agents on record")

    req_dict['agent_ifp'] = params
    return req_dict
