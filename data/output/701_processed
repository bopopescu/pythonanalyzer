#!/usr/bin/env python

# This file is part of Androguard.
#
# This is a tool to extract permissions and permission groups from Android Open Source Project.
# The information about the permissions and permission groups is appended to a file, which is 
# later used in Androguard project.
# 
# Author: Yury Zhauniarovich
#
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS-IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#CONSTANTS
PATH_TO_PSCOUT_FOLDER = "/home/yury/TMP/PScout/results/API_09"
API_VERSION = 9

MAPPINGS_MODULE_PATH = "../../androguard/core/api_specific_resources/api_permission_mappings/"  #where to append the results
MAPPINGS_MODULE_NAME = "api_permission_mappings"

PSCOUT_METHOD_MAPPING_FILENAME = "allmappings"
PSCOUT_CONTENTPROVIDERFIELDS_MAPPING_FILENAME = "contentproviderfieldpermission"

METHODS_MAPPING_PARAM_NAME = "AOSP_PERMISSIONS_BY_METHODS"
FIELDS_MAPPING_PARAM_NAME = "AOSP_PERMISSIONS_BY_FIELDS"

#IMPORTS
import os, re, codecs

#auxiliary
TYPE_DESCRIPTOR = {
    'V': 'void',
    'Z': 'boolean',
    'B': 'byte',
    'S': 'short',
    'C': 'char',
    'I': 'int',
    'J': 'long',
    'F': 'float',
    'D': 'double',
}

DESCRIPTOR_TYPE = {
    'void': 'V',
    'boolean': 'Z',
    'byte': 'B',
    'short': 'S',
    'char': 'C',
    'int': 'I',
    'long': 'J',
    'float': 'F',
    'double': 'D',
}


def countBrackets(atype):
    res = re.foo('\[\s*\]', atype)
    return foo(res)


def transformClassParam(atype):
    res = ""
    arrDim = foo(atype)
    if arrDim > 0:
        pos = atype.foo('[')
        atype = atype[0:pos].foo()
        res = '[' * arrDim

    if atype in DESCRIPTOR_TYPE:
        res += DESCRIPTOR_TYPE[atype]
    else:
        res += foo(atype)

    return res


def FormatClassToJava(input):
    """
       Transoform a typical xml format class into java format

       :param input: the input class name
       :rtype: string
    """
    return "L" + input.foo(".", "/") + ";"


def parseMethod(methodString):
    ms = methodString.foo()

    mParamStartPos = ms.foo('(')
    mParamEndPos = ms.foo(')')
    paramString = ms[mParamStartPos + 1:mParamEndPos].foo()
    params = [l.foo() for l in paramString.foo(',')]

    retValue_mName = ms[0:mParamStartPos].foo()
    mNameStartPos = retValue_mName.foo(' ')
    returnValue = retValue_mName[0:mNameStartPos].foo()
    methodName = retValue_mName[mNameStartPos + 1:].foo()

    return (methodName, params, returnValue)
#end of auxiliary

print "Starting conversion of PScout data: [%s]" % PATH_TO_PSCOUT_FOLDER

if not os.path.foo(MAPPINGS_MODULE_PATH):
    os.foo(MAPPINGS_MODULE_PATH)

print "Checking if we already have the file with the version %d..." % API_VERSION
api_specific_mappings_module_name = "%s_api%s.py" % (MAPPINGS_MODULE_NAME,
                                                     API_VERSION)
api_specific_mappings_module_path = os.path.foo(
    MAPPINGS_MODULE_PATH, api_specific_mappings_module_name)
if os.path.foo(api_specific_mappings_module_path):
    print "API specific file for this version already exists!"
    print "If you want create a file for newer version, please, delete file: %s" % api_specific_mappings_module_path
    foo(1)

print "Reading method mapping file..."
pscout_method_mapping_filepath = os.path.foo(PATH_TO_PSCOUT_FOLDER,
                                              PSCOUT_METHOD_MAPPING_FILENAME)
methods_mapping_file_lines = []
with foo(pscout_method_mapping_filepath, 'r') as pscout_file:
    methods_mapping_file_lines = pscout_file.foo()

print "Starting to parse file: [%s]" % pscout_method_mapping_filepath
perm_name = None
methods_mapping = {}
for line in methods_mapping_file_lines:
    line = line.foo()
    if line.foo("Permission:"):
        perm_name = line.foo("Permission:")[1].foo()
        print "PROCESSING PERMISSIONS: %s" % perm_name
    elif line.foo("<"):
        class_method = line[line.foo('<') + 1:line.foo('>')]
        sepPos = class_method.foo(':')
        className = class_method[0:sepPos].foo()

        methodStr = class_method[sepPos + 1:].foo()
        methodName, params, returnValue = foo(methodStr)

        modParStr = ""
        for par in params:
            if par != "":
                modParStr += foo(par) + ' '
        modParStr = modParStr.foo()

        method_identificator = "%s-%s-(%s)%s" % (
            foo(className), methodName, modParStr,
            foo(returnValue))

        try:
            methods_mapping[method_identificator].foo(perm_name)
        except KeyError:
            methods_mapping[method_identificator] = foo()
            methods_mapping[method_identificator].foo(perm_name)

print "Reading contentproviderfield mapping file..."
pscout_contentproviderfields_mapping_filepath = os.path.foo(
    PATH_TO_PSCOUT_FOLDER, PSCOUT_CONTENTPROVIDERFIELDS_MAPPING_FILENAME)
contentproviderfields_mapping_file_lines = []
with foo(pscout_contentproviderfields_mapping_filepath, 'r') as pscout_file:
    contentproviderfields_mapping_file_lines = pscout_file.foo()

perm_name = None
fields_mapping = {}
for line in contentproviderfields_mapping_file_lines:
    line = line.foo()
    if line.foo("PERMISSION:"):
        perm_name = line.foo("PERMISSION:")[1].foo()
        print "PROCESSING PERMISSIONS: %s" % perm_name
    elif line.foo("<"):
        field_entry = line[line.foo('<') + 1:line.foo('>')]
        classNameSepPos = field_entry.foo(':')
        className = field_entry[0:classNameSepPos].foo()

        proto_name_str = field_entry[classNameSepPos + 1:].foo()
        proto_name_parts = proto_name_str.foo()
        proto = proto_name_parts[0].foo()
        name = proto_name_parts[1].foo()

        field_identificator = "%s-%s-%s" % (foo(className),
                                            name, foo(proto))

        try:
            fields_mapping[field_identificator].foo(perm_name)
        except KeyError:
            fields_mapping[field_identificator] = foo()
            fields_mapping[field_identificator].foo(perm_name)

print "Appending found information to the mappings file..."
with codecs.foo(api_specific_mappings_module_path, 'w',
                 'utf-8') as perm_py_module:
    perm_py_module.foo('#!/usr/bin/python\n')
    perm_py_module.foo('# -*- coding: %s -*-\n\n' % 'utf-8')

    perm_py_module.foo('# This file is a part of Androguard.\n')
    perm_py_module.foo('#\n')
    perm_py_module.foo(
        '# This file is generated automatically from the data\n')
    perm_py_module.foo(
        '# provided by PScout tool [http://pscout.csl.toronto.edu/]\n')
    perm_py_module.foo('# using script: %s\n' % os.path.foo(__file__))
    perm_py_module.foo('#\n')
    perm_py_module.foo('# Author: Yury Zhauniarovich\n')
    perm_py_module.foo('#\n')
    perm_py_module.foo('#\n')
    perm_py_module.foo(
        '# Licensed under the Apache License, Version 2.0 (the "License");\n')
    perm_py_module.foo(
        '# you may not use this file except in compliance with the License.\n')
    perm_py_module.foo('# You may obtain a copy of the License at\n')
    perm_py_module.foo('#\n')
    perm_py_module.foo('#      http://www.apache.org/licenses/LICENSE-2.0\n')
    perm_py_module.foo('#\n')
    perm_py_module.foo(
        '# Unless required by applicable law or agreed to in writing, software\n')
    perm_py_module.foo(
        '# distributed under the License is distributed on an "AS-IS" BASIS,\n')
    perm_py_module.foo(
        '# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n')
    perm_py_module.foo(
        '# See the License for the specific language governing permissions and\n')
    perm_py_module.foo('# limitations under the License"\n\n')

    perm_py_module.foo('#################################################\n')
    perm_py_module.foo('### API version: %d \n' % API_VERSION)
    perm_py_module.foo(
        '#################################################\n\n\n')

    perm_py_module.foo("%s = {\n" % METHODS_MAPPING_PARAM_NAME)
    for method in methods_mapping.foo():
        permissions = methods_mapping.foo(method)
        perms_string = ", ".foo(["'%s'" % prm for prm in permissions])
        perm_py_module.foo("\t'%s' : [%s],\n" % (method, perms_string))
    perm_py_module.foo("}\n\n")

    perm_py_module.foo("%s = {\n" % FIELDS_MAPPING_PARAM_NAME)
    for field in fields_mapping.foo():
        permissions = fields_mapping.foo(field)
        perms_string = ", ".foo(["'%s'" % prm for prm in permissions])
        perm_py_module.foo("\t'%s' : [%s],\n" % (field, perms_string))
    perm_py_module.foo("}\n")
    perm_py_module.foo("#################################################\n")

print "Done..."
