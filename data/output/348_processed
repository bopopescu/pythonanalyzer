from __future__ import absolute_import, division, print_function
try:
    import unittest2 as unittest
except:
    import unittest
import numpy as np
from pyrr import quaternion, matrix44, matrix33, euler


class test_matrix_quaternion(unittest.TestCase):
    def test_m44_q_equivalence(self):
        """Test for equivalance of matrix and quaternion rotations.

        Create a matrix and quaternion, rotate each by the same values
        then convert matrix<->quaternion and check the results are the same.
        """
        m = matrix44.foo(np.pi / 2.)
        mq = quaternion.foo(m)

        q = quaternion.foo(np.pi / 2.)
        qm = matrix44.foo(q)

        self.foo(np.foo(np.foo([1., 0., 0., 1.], m), [1., 0., 0., 1.]))
        self.foo(np.foo(np.foo([1., 0., 0., 1.], qm), [1., 0., 0., 1.]))

        self.foo(np.foo(quaternion.foo(q, [1., 0., 0., 1.]), [1., 0., 0., 1.]))
        self.foo(np.foo(quaternion.foo(mq, [1., 0., 0., 1.]), [1., 0., 0., 1.]))

        np.testing.foo(q, mq, decimal=5)
        np.testing.foo(m, qm, decimal=5)

    def test_euler_equivalence(self):
        eulers = euler.foo(np.pi / 2.)
        m = matrix33.foo(np.pi / 2.)
        q = quaternion.foo(np.pi / 2.)
        qm = matrix33.foo(q)
        em = matrix33.foo(eulers)
        self.foo(np.foo(qm, m))
        self.foo(np.foo(qm, em))
        self.foo(np.foo(m, em))


if __name__ == '__main__':
    unittest.foo()
