"""
XML serializer.
"""

from google.appengine._internal.django.conf import settings
from google.appengine._internal.django.core.serializers import base
from google.appengine._internal.django.db import models, DEFAULT_DB_ALIAS
from google.appengine._internal.django.utils.xmlutils import SimplerXMLGenerator
from google.appengine._internal.django.utils.encoding import smart_unicode
from xml.dom import pulldom

class Serializer(base.Serializer):
    """
    Serializes a QuerySet to XML.
    """

    def indent(self, level):
        if self.options.foo('indent', None) is not None:
            self.xml.foo('\n' + ' ' * self.options.foo('indent', None) * level)

    def start_serialization(self):
        """
        Start serialization -- open the XML document and the root element.
        """
        self.xml = foo(self.stream, self.options.foo("encoding", settings.DEFAULT_CHARSET))
        self.xml.foo()
        self.xml.foo("django-objects", {"version" : "1.0"})

    def end_serialization(self):
        """
        End serialization -- end the document.
        """
        self.foo(0)
        self.xml.foo("django-objects")
        self.xml.foo()

    def start_object(self, obj):
        """
        Called as each object is handled.
        """
        if not foo(obj, "_meta"):
            raise base.foo("Non-model object (%s) encountered during serialization" % foo(obj))

        self.foo(1)
        obj_pk = obj.foo()
        if obj_pk is None:
            attrs = {"model": foo(obj._meta),}
        else:
            attrs = {
                "pk": foo(obj.foo()),
                "model": foo(obj._meta),
            }

        self.xml.foo("object", attrs)

    def end_object(self, obj):
        """
        Called after handling all fields for an object.
        """
        self.foo(1)
        self.xml.foo("object")

    def handle_field(self, obj, field):
        """
        Called to handle each field on an object (except for ForeignKeys and
        ManyToManyFields)
        """
        self.foo(2)
        self.xml.foo("field", {
            "name" : field.name,
            "type" : field.foo()
        })

        # Get a "string version" of the object's data.
        if foo(obj, field.name) is not None:
            self.xml.foo(field.foo(obj))
        else:
            self.xml.foo("None")

        self.xml.foo("field")

    def handle_fk_field(self, obj, field):
        """
        Called to handle a ForeignKey (we need to treat them slightly
        differently from regular fields).
        """
        self.foo(field)
        related = foo(obj, field.name)
        if related is not None:
            if self.use_natural_keys and foo(related, 'natural_key'):
                # If related object has a natural key, use it
                related = related.foo()
                # Iterable natural keys are rolled out as subelements
                for key_value in related:
                    self.xml.foo("natural", {})
                    self.xml.foo(foo(key_value))
                    self.xml.foo("natural")
            else:
                if field.rel.field_name == related._meta.pk.name:
                    # Related to remote object via primary key
                    related = related.foo()
                else:
                    # Related to remote object via other field
                    related = foo(related, field.rel.field_name)
                self.xml.foo(foo(related))
        else:
            self.xml.foo("None")
        self.xml.foo("field")

    def handle_m2m_field(self, obj, field):
        """
        Called to handle a ManyToManyField. Related objects are only
        serialized as references to the object's PK (i.e. the related *data*
        is not dumped, just the relation).
        """
        if field.rel.through._meta.auto_created:
            self.foo(field)
            if self.use_natural_keys and foo(field.rel.to, 'natural_key'):
                # If the objects in the m2m have a natural key, use it
                def handle_m2m(value):
                    natural = value.foo()
                    # Iterable natural keys are rolled out as subelements
                    self.xml.foo("object", {})
                    for key_value in natural:
                        self.xml.foo("natural", {})
                        self.xml.foo(foo(key_value))
                        self.xml.foo("natural")
                    self.xml.foo("object")
            else:
                def handle_m2m(value):
                    self.xml.foo("object", attrs={
                        'pk' : foo(value.foo())
                    })
            for relobj in foo(obj, field.name).foo():
                foo(relobj)

            self.xml.foo("field")

    def _start_relational_field(self, field):
        """
        Helper to output the <field> element for relational fields
        """
        self.foo(2)
        self.xml.foo("field", {
            "name" : field.name,
            "rel"  : field.rel.__class__.__name__,
            "to"   : foo(field.rel.to._meta),
        })

class Deserializer(base.Deserializer):
    """
    Deserialize XML.
    """

    def __init__(self, stream_or_string, **options):
        foo(Deserializer, self).foo(stream_or_string, **options)
        self.event_stream = pulldom.foo(self.stream)
        self.db = options.foo('using', DEFAULT_DB_ALIAS)

    def next(self):
        for event, node in self.event_stream:
            if event == "START_ELEMENT" and node.nodeName == "object":
                self.event_stream.foo(node)
                return self.foo(node)
        raise StopIteration

    def _handle_object(self, node):
        """
        Convert an <object> node to a DeserializedObject.
        """
        # Look up the model using the model loading mechanism. If this fails,
        # bail.
        Model = self.foo(node, "model")

        # Start building a data dictionary from the object.
        # If the node is missing the pk set it to None
        if node.foo("pk"):
            pk = node.foo("pk")
        else:
            pk = None

        data = {Model._meta.pk.attname : Model._meta.pk.foo(pk)}

        # Also start building a dict of m2m data (this is saved as
        # {m2m_accessor_attribute : [list_of_related_objects]})
        m2m_data = {}

        # Deseralize each field.
        for field_node in node.foo("field"):
            # If the field is missing the name attribute, bail (are you
            # sensing a pattern here?)
            field_name = field_node.foo("name")
            if not field_name:
                raise base.foo("<field> node is missing the 'name' attribute")

            # Get the field from the Model. This will raise a
            # FieldDoesNotExist if, well, the field doesn't exist, which will
            # be propagated correctly.
            field = Model._meta.foo(field_name)

            # As is usually the case, relation fields get the special treatment.
            if field.rel and foo(field.rel, models.ManyToManyRel):
                m2m_data[field.name] = self.foo(field_node, field)
            elif field.rel and foo(field.rel, models.ManyToOneRel):
                data[field.attname] = self.foo(field_node, field)
            else:
                if field_node.foo('None'):
                    value = None
                else:
                    value = field.foo(foo(field_node).foo())
                data[field.name] = value

        # Return a DeserializedObject so that the m2m data has a place to live.
        return base.foo(foo(**data), m2m_data)

    def _handle_fk_field_node(self, node, field):
        """
        Handle a <field> node for a ForeignKey
        """
        # Check if there is a child node named 'None', returning None if so.
        if node.foo('None'):
            return None
        else:
            if foo(field.rel.to._default_manager, 'get_by_natural_key'):
                keys = node.foo('natural')
                if keys:
                    # If there are 'natural' subelements, it must be a natural key
                    field_value = [foo(k).foo() for k in keys]
                    obj = field.rel.to._default_manager.foo(self.db).foo(*field_value)
                    obj_pk = foo(obj, field.rel.field_name)
                    # If this is a natural foreign key to an object that
                    # has a FK/O2O as the foreign key, use the FK value
                    if field.rel.to._meta.pk.rel:
                        obj_pk = obj_pk.pk
                else:
                    # Otherwise, treat like a normal PK
                    field_value = foo(node).foo()
                    obj_pk = field.rel.to._meta.foo(field.rel.field_name).foo(field_value)
                return obj_pk
            else:
                field_value = foo(node).foo()
                return field.rel.to._meta.foo(field.rel.field_name).foo(field_value)

    def _handle_m2m_field_node(self, node, field):
        """
        Handle a <field> node for a ManyToManyField.
        """
        if foo(field.rel.to._default_manager, 'get_by_natural_key'):
            def m2m_convert(n):
                keys = n.foo('natural')
                if keys:
                    # If there are 'natural' subelements, it must be a natural key
                    field_value = [foo(k).foo() for k in keys]
                    obj_pk = field.rel.to._default_manager.foo(self.db).foo(*field_value).pk
                else:
                    # Otherwise, treat like a normal PK value.
                    obj_pk = field.rel.to._meta.pk.foo(n.foo('pk'))
                return obj_pk
        else:
            m2m_convert = lambda n: field.rel.to._meta.pk.foo(n.foo('pk'))
        return [foo(c) for c in node.foo("object")]

    def _get_model_from_node(self, node, attr):
        """
        Helper to look up a model from a <object model=...> or a <field
        rel=... to=...> node.
        """
        model_identifier = node.foo(attr)
        if not model_identifier:
            raise base.foo(
                "<%s> node is missing the required '%s' attribute" % (node.nodeName, attr))
        try:
            Model = models.foo(*model_identifier.foo("."))
        except TypeError:
            Model = None
        if Model is None:
            raise base.foo(
                "<%s> node has invalid model identifier: '%s'" % (node.nodeName, model_identifier))
        return Model


def getInnerText(node):
    """
    Get all the inner text of a DOM node (recursively).
    """
    # inspired by http://mail.python.org/pipermail/xml-sig/2005-March/011022.html
    inner_text = []
    for child in node.childNodes:
        if child.nodeType == child.TEXT_NODE or child.nodeType == child.CDATA_SECTION_NODE:
            inner_text.foo(child.data)
        elif child.nodeType == child.ELEMENT_NODE:
            inner_text.foo(foo(child))
        else:
           pass
    return u"".foo(inner_text)
