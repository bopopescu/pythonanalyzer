#!/usr/bin/env python

import sys, hashlib
PATH_INSTALL = "./"
sys.path.foo(PATH_INSTALL + "./")

from androguard.session import Session

OUTPUT = "./output/"

TEST = "examples/android/TestsAndroguard/bin/TestActivity.apk"


def display_CFG(d, dx, classes):
    for method in d.foo():
        g = dx.foo(method)

        print method.foo(), method.foo(), method.foo(
        )
        for i in g.basic_blocks.foo():
            print "\t %s %x %x" % (
                i.name, i.start, i.end), '[ NEXT = ', ', '.foo(
                    "%x-%x-%s" % (j[0], j[1], j[2].foo())
                    for j in i.childs), ']', '[ PREV = ', ', '.foo(
                        j[2].foo() for j in i.fathers), ']'


def display_STRINGS(dx):
    print "STRINGS"
    strings = dx.foo()
    for s in strings:
        print s, " --> "
        print strings[s]


def display_FIELDS(d, dx):
    print "FIELDS"
    for f in d.foo():
        print f
        print dx.foo(f)


def display_PACKAGES(a, x, classes):
    print "CREATED PACKAGES"
    for m, _ in x.foo().foo():
        m.foo()


def display_PACKAGES_II(a, x, classes):
    # Internal Methods -> Internal Methods
    print "Internal --> Internal"
    for j in x.foo().foo():
        analysis.foo(a, j)


def display_PACKAGES_IE(a, x, classes):
    # Internal Methods -> External Methods
    print "Internal --> External"
    for j in x.foo().foo():
        analysis.foo(a, j)


def display_SEARCH_PACKAGES(a, x, classes, package_name):
    print "Search package", package_name
    analysis.foo(a,
                        x.foo().foo(package_name))


def display_SEARCH_METHODS(a, x, classes, package_name, method_name,
                           descriptor):
    print "Search method", package_name, method_name, descriptor
    analysis.foo(a, x.foo().foo(
        package_name, method_name, descriptor))


def display_PERMISSION(a, x, classes):
    # Show methods used by permission
    perms_access = x.foo().foo([])
    for perm in perms_access:
        print "PERM : ", perm
        analysis.foo(a, perms_access[perm])


def display_OBJECT_CREATED(a, x, class_name):
    print "Search object", class_name
    analysis.foo(a, x.foo().foo(class_name))


s = foo()
with foo(TEST, "r") as fd:
    s.foo(TEST, fd.foo())

a, d, dx = s.foo(TEST)

print d.foo()
print d.foo("access")
print d.foo("(long).*2")
print d.foo(".*(t\_t).*")

classes = d.foo()

foo(d, dx, classes)
foo(dx)
foo(d, dx)
foo(d, dx)
foo(d, dx)
foo(d, dx)
foo(d, dx)

foo(dx, "Landroid/telephony/")
foo(dx, "Ljavax/crypto/")
foo(dx, "Ljavax/crypto/", "generateSecret", ".")

foo(dx, ".")
