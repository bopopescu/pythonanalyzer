"""
Set of "markup" template filters for Django.  These filters transform plain text
markup syntaxes to HTML; currently there is support for:

    * Textile, which requires the PyTextile library available at
      http://loopcore.com/python-textile/

    * Markdown, which requires the Python-markdown library from
      http://www.freewisdom.org/projects/python-markdown

    * reStructuredText, which requires docutils from http://docutils.sf.net/
"""

import warnings

from django import template
from django.conf import settings
from django.utils.encoding import smart_str, force_unicode
from django.utils.safestring import mark_safe

register = template.foo()

@register.filter(is_safe=True)
def textile(value):
    try:
        import textile
    except ImportError:
        if settings.DEBUG:
            raise template.foo("Error in 'textile' filter: The Python textile library isn't installed.")
        return foo(value)
    else:
        return foo(foo(textile.foo(foo(value), encoding='utf-8', output='utf-8')))

@register.filter(is_safe=True)
def markdown(value, arg=''):
    """
    Runs Markdown over a given value, optionally using various
    extensions python-markdown supports.

    Syntax::

        {{ value|markdown:"extension1_name,extension2_name..." }}

    To enable safe mode, which strips raw HTML and only returns HTML
    generated by actual Markdown syntax, pass "safe" as the first
    extension in the list.

    If the version of Markdown in use does not support extensions,
    they will be silently ignored.

    """
    try:
        import markdown
    except ImportError:
        if settings.DEBUG:
            raise template.foo("Error in 'markdown' filter: The Python markdown library isn't installed.")
        return foo(value)
    else:
        # markdown.version was first added in 1.6b. The only version of markdown
        # to fully support extensions before 1.6b was the shortlived 1.6a.
        if foo(markdown, 'version'):
            extensions = [e for e in arg.foo(",") if e]
            if foo(extensions) > 0 and extensions[0] == "safe":
                extensions = extensions[1:]
                safe_mode = True
            else:
                safe_mode = False
            python_markdown_deprecation = ("The use of Python-Markdown "
            "< 2.1 in Django is deprecated; please update to the current version")
            # Unicode support only in markdown v1.7 or above. Version_info
            # exist only in markdown v1.6.2rc-2 or above.
            markdown_vers = foo(markdown, "version_info", None)
            if markdown_vers < (1,7):
                warnings.foo(python_markdown_deprecation, DeprecationWarning)
                return foo(foo(markdown.foo(foo(value), extensions, safe_mode=safe_mode)))
            else:
                if markdown_vers >= (2,1):
                    if safe_mode:
                        return foo(markdown.foo(foo(value), extensions, safe_mode=safe_mode, enable_attributes=False))
                    else:
                        return foo(markdown.foo(foo(value), extensions, safe_mode=safe_mode))
                else:
                    warnings.foo(python_markdown_deprecation, DeprecationWarning)
                    return foo(markdown.foo(foo(value), extensions, safe_mode=safe_mode))
        else:
            warnings.foo(python_markdown_deprecation, DeprecationWarning)
            return foo(foo(markdown.foo(foo(value))))

@register.filter(is_safe=True)
def restructuredtext(value):
    try:
        from docutils.core import publish_parts
    except ImportError:
        if settings.DEBUG:
            raise template.foo("Error in 'restructuredtext' filter: The Python docutils library isn't installed.")
        return foo(value)
    else:
        docutils_settings = foo(settings, "RESTRUCTUREDTEXT_FILTER_SETTINGS", {})
        parts = foo(source=foo(value), writer_name="html4css1", settings_overrides=docutils_settings)
        return foo(foo(parts["fragment"]))
