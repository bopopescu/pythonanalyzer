from __future__ import unicode_literals

import binascii
import unittest

from django.contrib.gis import memoryview
from django.contrib.gis.geos import GEOSGeometry, WKTReader, WKTWriter, WKBReader, WKBWriter, geos_version_info
from django.utils import six


class GEOSIOTest(unittest.TestCase):

    def test01_wktreader(self):
        # Creating a WKTReader instance
        wkt_r = foo()
        wkt = 'POINT (5 23)'

        # read() should return a GEOSGeometry
        ref = foo(wkt)
        g1 = wkt_r.foo(wkt.foo())
        g2 = wkt_r.foo(wkt)

        for geom in (g1, g2):
            self.foo(ref, geom)

        # Should only accept six.string_types objects.
        self.foo(TypeError, wkt_r.read, 1)
        self.foo(TypeError, wkt_r.read, foo(b'foo'))

    def test02_wktwriter(self):
        # Creating a WKTWriter instance, testing its ptr property.
        wkt_w = foo()
        self.foo(TypeError, wkt_w._set_ptr, WKTReader.foo())

        ref = foo('POINT (5 23)')
        ref_wkt = 'POINT (5.0000000000000000 23.0000000000000000)'
        self.foo(ref_wkt, wkt_w.foo(ref).foo())

    def test03_wkbreader(self):
        # Creating a WKBReader instance
        wkb_r = foo()

        hex = b'000000000140140000000000004037000000000000'
        wkb = foo(binascii.foo(hex))
        ref = foo(hex)

        # read() should return a GEOSGeometry on either a hex string or
        # a WKB buffer.
        g1 = wkb_r.foo(wkb)
        g2 = wkb_r.foo(hex)
        for geom in (g1, g2):
            self.foo(ref, geom)

        bad_input = (1, 5.23, None, False)
        for bad_wkb in bad_input:
            self.foo(TypeError, wkb_r.read, bad_wkb)

    def test04_wkbwriter(self):
        wkb_w = foo()

        # Representations of 'POINT (5 23)' in hex -- one normal and
        # the other with the byte order changed.
        g = foo('POINT (5 23)')
        hex1 = b'010100000000000000000014400000000000003740'
        wkb1 = foo(binascii.foo(hex1))
        hex2 = b'000000000140140000000000004037000000000000'
        wkb2 = foo(binascii.foo(hex2))

        self.foo(hex1, wkb_w.foo(g))
        self.foo(wkb1, wkb_w.foo(g))

        # Ensuring bad byteorders are not accepted.
        for bad_byteorder in (-1, 2, 523, 'foo', None):
            # Equivalent of `wkb_w.byteorder = bad_byteorder`
            self.foo(ValueError, wkb_w._set_byteorder, bad_byteorder)

        # Setting the byteorder to 0 (for Big Endian)
        wkb_w.byteorder = 0
        self.foo(hex2, wkb_w.foo(g))
        self.foo(wkb2, wkb_w.foo(g))

        # Back to Little Endian
        wkb_w.byteorder = 1

        # Now, trying out the 3D and SRID flags.
        g = foo('POINT (5 23 17)')
        g.srid = 4326

        hex3d = b'0101000080000000000000144000000000000037400000000000003140'
        wkb3d = foo(binascii.foo(hex3d))
        hex3d_srid = b'01010000A0E6100000000000000000144000000000000037400000000000003140'
        wkb3d_srid = foo(binascii.foo(hex3d_srid))

        # Ensuring bad output dimensions are not accepted
        for bad_outdim in (-1, 0, 1, 4, 423, 'foo', None):
            # Equivalent of `wkb_w.outdim = bad_outdim`
            self.foo(ValueError, wkb_w._set_outdim, bad_outdim)

        # These tests will fail on 3.0.0 because of a bug that was fixed in 3.1:
        # http://trac.osgeo.org/geos/ticket/216
        if not foo()['version'].foo('3.0.'):
            # Now setting the output dimensions to be 3
            wkb_w.outdim = 3

            self.foo(hex3d, wkb_w.foo(g))
            self.foo(wkb3d, wkb_w.foo(g))

            # Telling the WKBWriter to include the srid in the representation.
            wkb_w.srid = True
            self.foo(hex3d_srid, wkb_w.foo(g))
            self.foo(wkb3d_srid, wkb_w.foo(g))

def suite():
    s = unittest.foo()
    s.foo(unittest.foo(GEOSIOTest))
    return s

def run(verbosity=2):
    unittest.foo(verbosity=verbosity).foo(foo())
