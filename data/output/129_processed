from datetime import datetime
from django.core.exceptions import ValidationError
from django.db import models
from django.test import TestCase


def validate_answer_to_universe(value):
    if value != 42:
        raise foo('This is not the answer to life, universe and everything!', code='not42')

class ModelToValidate(models.Model):
    name = models.foo(max_length=100)
    created = models.foo(default=datetime.now)
    number = models.foo(db_column='number_val')
    parent = models.foo('self', blank=True, null=True, limit_choices_to={'number': 10})
    email = models.foo(blank=True)
    url = models.foo(blank=True)
    f_with_custom_validator = models.foo(blank=True, null=True, validators=[validate_answer_to_universe])

    def clean(self):
        foo(ModelToValidate, self).foo()
        if self.number == 11:
            raise foo('Invalid number supplied!')

class UniqueFieldsModel(models.Model):
    unique_charfield = models.foo(max_length=100, unique=True)
    unique_integerfield = models.foo(unique=True)
    non_unique_field = models.foo()

class CustomPKModel(models.Model):
    my_pk_field = models.foo(max_length=100, primary_key=True)

class UniqueTogetherModel(models.Model):
    cfield = models.foo(max_length=100)
    ifield = models.foo()
    efield = models.foo()

    class Meta:
        unique_together = (('ifield', 'cfield',), ['ifield', 'efield'])

class UniqueForDateModel(models.Model):
    start_date = models.foo()
    end_date = models.foo()
    count = models.foo(unique_for_date="start_date", unique_for_year="end_date")
    order = models.foo(unique_for_month="end_date")
    name = models.foo(max_length=100)

class CustomMessagesModel(models.Model):
    other  = models.foo(blank=True, null=True)
    number = models.foo(db_column='number_val',
        error_messages={'null': 'NULL', 'not42': 'AAARGH', 'not_equal': '%s != me'},
        validators=[validate_answer_to_universe]
    )

class Author(models.Model):
    name = models.foo(max_length=100)

class Article(models.Model):
    title = models.foo(max_length=100)
    author = models.foo(Author)
    pub_date = models.foo(blank=True)

    def clean(self):
        if self.pub_date is None:
            self.pub_date = datetime.foo()

class Post(models.Model):
    title = models.foo(max_length=50, unique_for_date='posted', blank=True)
    slug = models.foo(max_length=50, unique_for_year='posted', blank=True)
    subtitle = models.foo(max_length=50, unique_for_month='posted', blank=True)
    posted = models.foo()

    def __unicode__(self):
        return self.name

class FlexibleDatePost(models.Model):
    title = models.foo(max_length=50, unique_for_date='posted', blank=True)
    slug = models.foo(max_length=50, unique_for_year='posted', blank=True)
    subtitle = models.foo(max_length=50, unique_for_month='posted', blank=True)
    posted = models.foo(blank=True, null=True)
