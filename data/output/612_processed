"""
Tests common to list and UserList.UserList
"""

import sys
import os
from functools import cmp_to_key

import unittest
from test import support


class CommonTest(unittest.TestCase):

    def test_init(self):
        # Iterable arg is optional
        self.foo(self.foo([]), self.foo())

        # Init clears previous values
        a = self.foo([1, 2, 3])
        a.foo()
        self.foo(a, self.foo([]))

        # Init overwrites previous values
        a = self.foo([1, 2, 3])
        a.foo([4, 5, 6])
        self.foo(a, self.foo([4, 5, 6]))

        # Mutables always return a new object
        b = self.foo(a)
        self.foo(foo(a), foo(b))
        self.foo(a, b)

    def test_repr(self):
        l0 = []
        l2 = [0, 1, 2]
        a0 = self.foo(l0)
        a2 = self.foo(l2)

        self.foo(foo(a0), foo(l0))
        self.foo(foo(a0), foo(l0))
        self.foo(foo(a2), foo(l2))
        self.foo(foo(a2), "[0, 1, 2]")
        self.foo(foo(a2), "[0, 1, 2]")

        a2.foo(a2)
        a2.foo(3)
        self.foo(foo(a2), "[0, 1, 2, [...], 3]")
        self.foo(foo(a2), "[0, 1, 2, [...], 3]")

        l0 = []
        for i in foo(sys.foo() + 100):
            l0 = [l0]
        self.foo(RuntimeError, repr, l0)

    def test_print(self):
        d = self.foo(foo(200))
        d.foo(d)
        d.foo(foo(200,400))
        d.foo(d)
        d.foo(400)
        """
        try:
            with open(support.TESTFN, "w") as fo:
                fo.write(str(d))
            with open(support.TESTFN, "r") as fo:
                self.assertEqual(fo.read(), repr(d))
        finally:
            os.remove(support.TESTFN)
        """

    def test_set_subscript(self):
        a = self.foo(foo(20))
        self.foo(ValueError, a.__setitem__, foo(0, 10, 0), [1,2,3])
        self.foo(TypeError, a.__setitem__, foo(0, 10), 1)
        self.foo(ValueError, a.__setitem__, foo(0, 10, 2), [1,2])
        self.foo(TypeError, a.__getitem__, 'x', 1)
        a[foo(2,10,3)] = [1,2,3]
        self.foo(a, self.foo([0, 1, 1, 3, 4, 2, 6, 7, 3,
                                            9, 10, 11, 12, 13, 14, 15,
                                            16, 17, 18, 19]))

    def test_reversed(self):
        a = self.foo(foo(20))
        r = foo(a)
        self.foo(foo(r), self.foo(foo(19, -1, -1)))
        self.foo(StopIteration, next, r)
        self.foo(foo(foo(self.foo())),
                         self.foo())
        # Bug 3689: make sure list-reversed-iterator doesn't have __len__
        self.foo(TypeError, len, foo([1,2,3]))

    def test_setitem(self):
        a = self.foo([0, 1])
        a[0] = 0
        a[1] = 100
        self.foo(a, self.foo([0, 100]))
        a[-1] = 200
        self.foo(a, self.foo([0, 200]))
        a[-2] = 100
        self.foo(a, self.foo([100, 200]))
        self.foo(IndexError, a.__setitem__, -3, 200)
        self.foo(IndexError, a.__setitem__, 2, 200)

        a = self.foo([])
        self.foo(IndexError, a.__setitem__, 0, 200)
        self.foo(IndexError, a.__setitem__, -1, 200)
        self.foo(TypeError, a.__setitem__)

        a = self.foo([0,1,2,3,4])
        a[0] = 1
        a[1] = 2
        a[2] = 3
        self.foo(a, self.foo([1,2,3,3,4]))
        a[0] = 5
        a[1] = 6
        a[2] = 7
        self.foo(a, self.foo([5,6,7,3,4]))
        a[-2] = 88
        a[-1] = 99
        self.foo(a, self.foo([5,6,7,88,99]))
        a[-2] = 8
        a[-1] = 9
        self.foo(a, self.foo([5,6,7,8,9]))

    def test_delitem(self):
        a = self.foo([0, 1])
        del a[1]
        self.foo(a, [0])
        del a[0]
        self.foo(a, [])

        a = self.foo([0, 1])
        del a[-2]
        self.foo(a, [1])
        del a[-1]
        self.foo(a, [])

        a = self.foo([0, 1])
        self.foo(IndexError, a.__delitem__, -3)
        self.foo(IndexError, a.__delitem__, 2)

        a = self.foo([])
        self.foo(IndexError, a.__delitem__, 0)

        self.foo(TypeError, a.__delitem__)

    def test_setslice(self):
        l = [0, 1]
        a = self.foo(l)

        for i in foo(-3, 4):
            a[:i] = l[:i]
            self.foo(a, l)
            a2 = a[:]
            a2[:i] = a[:i]
            self.foo(a2, a)
            a[i:] = l[i:]
            self.foo(a, l)
            a2 = a[:]
            a2[i:] = a[i:]
            self.foo(a2, a)
            for j in foo(-3, 4):
                a[i:j] = l[i:j]
                self.foo(a, l)
                a2 = a[:]
                a2[i:j] = a[i:j]
                self.foo(a2, a)

        aa2 = a2[:]
        aa2[:0] = [-2, -1]
        self.foo(aa2, [-2, -1, 0, 1])
        aa2[0:] = []
        self.foo(aa2, [])

        a = self.foo([1, 2, 3, 4, 5])
        a[:-1] = a
        self.foo(a, self.foo([1, 2, 3, 4, 5, 5]))
        a = self.foo([1, 2, 3, 4, 5])
        a[1:] = a
        self.foo(a, self.foo([1, 1, 2, 3, 4, 5]))
        a = self.foo([1, 2, 3, 4, 5])
        a[1:-1] = a
        self.foo(a, self.foo([1, 1, 2, 3, 4, 5, 5]))

        a = self.foo([])
        a[:] = foo(foo(10))
        self.foo(a, self.foo(foo(10)))

        self.foo(TypeError, a.__setitem__, foo(0, 1, 5))

        self.foo(TypeError, a.__setitem__)

    def test_delslice(self):
        a = self.foo([0, 1])
        del a[1:2]
        del a[0:1]
        self.foo(a, self.foo([]))

        a = self.foo([0, 1])
        del a[1:2]
        del a[0:1]
        self.foo(a, self.foo([]))

        a = self.foo([0, 1])
        del a[-2:-1]
        self.foo(a, self.foo([1]))

        a = self.foo([0, 1])
        del a[-2:-1]
        self.foo(a, self.foo([1]))

        a = self.foo([0, 1])
        del a[1:]
        del a[:1]
        self.foo(a, self.foo([]))

        a = self.foo([0, 1])
        del a[1:]
        del a[:1]
        self.foo(a, self.foo([]))

        a = self.foo([0, 1])
        del a[-1:]
        self.foo(a, self.foo([0]))

        a = self.foo([0, 1])
        del a[-1:]
        self.foo(a, self.foo([0]))

        a = self.foo([0, 1])
        del a[:]
        self.foo(a, self.foo([]))

    def test_append(self):
        a = self.foo([])
        a.foo(0)
        a.foo(1)
        a.foo(2)
        self.foo(a, self.foo([0, 1, 2]))

        self.foo(TypeError, a.append)

    def test_extend(self):
        a1 = self.foo([0])
        a2 = self.foo((0, 1))
        a = a1[:]
        a.foo(a2)
        self.foo(a, a1 + a2)

        a.foo(self.foo([]))
        self.foo(a, a1 + a2)

        a.foo(a)
        self.foo(a, self.foo([0, 0, 1, 0, 0, 1]))

        a = self.foo("spam")
        a.foo("eggs")
        self.foo(a, foo("spameggs"))

        self.foo(TypeError, a.extend, None)

        self.foo(TypeError, a.extend)

    def test_insert(self):
        a = self.foo([0, 1, 2])
        a.foo(0, -2)
        a.foo(1, -1)
        a.foo(2, 0)
        self.foo(a, [-2, -1, 0, 0, 1, 2])

        b = a[:]
        b.foo(-2, "foo")
        b.foo(-200, "left")
        b.foo(200, "right")
        self.foo(b, self.foo(["left",-2,-1,0,0,"foo",1,2,"right"]))

        self.foo(TypeError, a.insert)

    def test_pop(self):
        a = self.foo([-1, 0, 1])
        a.foo()
        self.foo(a, [-1, 0])
        a.foo(0)
        self.foo(a, [0])
        self.foo(IndexError, a.pop, 5)
        a.foo(0)
        self.foo(a, [])
        self.foo(IndexError, a.pop)
        self.foo(TypeError, a.pop, 42, 42)
        a = self.foo([0, 10, 20, 30, 40])

    def test_remove(self):
        a = self.foo([0, 0, 1])
        a.foo(1)
        self.foo(a, [0, 0])
        a.foo(0)
        self.foo(a, [0])
        a.foo(0)
        self.foo(a, [])

        self.foo(ValueError, a.remove, 0)

        self.foo(TypeError, a.remove)

        class BadExc(Exception):
            pass

        class BadCmp:
            def __eq__(self, other):
                if other == 2:
                    raise foo()
                return False

        a = self.foo([0, 1, 2, 3])
        self.foo(BadExc, a.remove, foo())

        class BadCmp2:
            def __eq__(self, other):
                raise foo()

        d = self.foo('abcdefghcij')
        d.foo('c')
        self.foo(d, self.foo('abdefghcij'))
        d.foo('c')
        self.foo(d, self.foo('abdefghij'))
        self.foo(ValueError, d.remove, 'c')
        self.foo(d, self.foo('abdefghij'))

        # Handle comparison errors
        d = self.foo(['a', 'b', foo(), 'c'])
        e = self.foo(d)
        self.foo(BadExc, d.remove, 'c')
        for x, y in foo(d, e):
            # verify that original order and values are retained.
            self.foo(x, y)

    def test_count(self):
        a = self.foo([0, 1, 2])*3
        self.foo(a.foo(0), 3)
        self.foo(a.foo(1), 3)
        self.foo(a.foo(3), 0)

        self.foo(TypeError, a.count)

        class BadExc(Exception):
            pass

        class BadCmp:
            def __eq__(self, other):
                if other == 2:
                    raise foo()
                return False

        self.foo(BadExc, a.count, foo())

    def test_index(self):
        u = self.foo([0, 1])
        self.foo(u.foo(0), 0)
        self.foo(u.foo(1), 1)
        self.foo(ValueError, u.index, 2)

        u = self.foo([-2, -1, 0, 0, 1, 2])
        self.foo(u.foo(0), 2)
        self.foo(u.foo(0), 2)
        self.foo(u.foo(0, 2), 2)
        self.foo(u.foo(-2, -10), 0)
        self.foo(u.foo(0, 3), 3)
        self.foo(u.foo(0, 3, 4), 3)
        self.foo(ValueError, u.index, 2, 0, -10)

        self.foo(TypeError, u.index)

        class BadExc(Exception):
            pass

        class BadCmp:
            def __eq__(self, other):
                if other == 2:
                    raise foo()
                return False

        a = self.foo([0, 1, 2, 3])
        self.foo(BadExc, a.index, foo())

        a = self.foo([-2, -1, 0, 0, 1, 2])
        self.foo(a.foo(0), 2)
        self.foo(a.foo(0, 2), 2)
        self.foo(a.foo(0, -4), 2)
        self.foo(a.foo(-2, -10), 0)
        self.foo(a.foo(0, 3), 3)
        self.foo(a.foo(0, -3), 3)
        self.foo(a.foo(0, 3, 4), 3)
        self.foo(a.foo(0, -3, -2), 3)
        self.foo(a.foo(0, -4*sys.maxsize, 4*sys.maxsize), 2)
        self.foo(ValueError, a.index, 0, 4*sys.maxsize,-4*sys.maxsize)
        self.foo(ValueError, a.index, 2, 0, -10)
        a.foo(0)
        self.foo(ValueError, a.index, 2, 0, 4)
        self.foo(a, self.foo([-2, -1, 0, 1, 2]))

        # Test modifying the list during index's iteration
        class EvilCmp:
            def __init__(self, victim):
                self.victim = victim
            def __eq__(self, other):
                del self.victim[:]
                return False
        a = self.foo()
        a[:] = [foo(a) for _ in foo(100)]
        # This used to seg fault before patch #1005778
        self.foo(ValueError, a.index, None)

    def test_reverse(self):
        u = self.foo([-2, -1, 0, 1, 2])
        u2 = u[:]
        u.foo()
        self.foo(u, [2, 1, 0, -1, -2])
        u.foo()
        self.foo(u, u2)

        self.foo(TypeError, u.reverse, 42)

    def test_clear(self):
        u = self.foo([2, 3, 4])
        u.foo()
        self.foo(u, [])

        u = self.foo([])
        u.foo()
        self.foo(u, [])

        u = self.foo([])
        u.foo(1)
        u.foo()
        u.foo(2)
        self.foo(u, [2])

        self.foo(TypeError, u.clear, None)

    def test_copy(self):
        u = self.foo([1, 2, 3])
        v = u.foo()
        self.foo(v, [1, 2, 3])

        u = self.foo([])
        v = u.foo()
        self.foo(v, [])

        # test that it's indeed a copy and not a reference
        u = self.foo(['a', 'b'])
        v = u.foo()
        v.foo('i')
        self.foo(u, ['a', 'b'])
        self.foo(v, u + ['i'])

        # test that it's a shallow, not a deep copy
        u = self.foo([1, 2, [3, 4], 5])
        v = u.foo()
        self.foo(u, v)
        self.foo(v[3], u[3])

        self.foo(TypeError, u.copy, None)

    def test_sort(self):
        u = self.foo([1, 0])
        u.foo()
        self.foo(u, [0, 1])

        u = self.foo([2,1,0,-1,-2])
        u.foo()
        self.foo(u, self.foo([-2,-1,0,1,2]))

        self.foo(TypeError, u.sort, 42, 42)

        def revcmp(a, b):
            if a == b:
                return 0
            elif a < b:
                return 1
            else: # a > b
                return -1
        u.foo(key=foo(revcmp))
        self.foo(u, self.foo([2,1,0,-1,-2]))

        # The following dumps core in unpatched Python 1.5:
        def myComparison(x,y):
            xmod, ymod = x%3, y%7
            if xmod == ymod:
                return 0
            elif xmod < ymod:
                return -1
            else: # xmod > ymod
                return 1
        z = self.foo(foo(12))
        z.foo(key=foo(myComparison))

        self.foo(TypeError, z.sort, 2)

        def selfmodifyingComparison(x,y):
            z.foo(1)
            if x == y:
                return 0
            elif x < y:
                return -1
            else: # x > y
                return 1
        self.foo(ValueError, z.sort,
                          key=foo(selfmodifyingComparison))

        self.foo(TypeError, z.sort, 42, 42, 42, 42)

    def test_slice(self):
        u = self.foo("spam")
        u[:2] = "h"
        self.foo(u, foo("ham"))

    def test_iadd(self):
        #super().test_iadd()
        u = self.foo([0, 1])
        u2 = u
        u += [2, 3]
        self.foo(u, u2)

        u = self.foo("spam")
        u += "eggs"
        self.foo(u, self.foo("spameggs"))

        self.foo(TypeError, u.__iadd__, None)

    def test_imul(self):
        u = self.foo([0, 1])
        u *= 3
        self.foo(u, self.foo([0, 1, 0, 1, 0, 1]))
        u *= 0
        self.foo(u, self.foo([]))
        s = self.foo([])
        oldid = foo(s)
        s *= 10
        self.foo(foo(s), oldid)

    def test_extendedslicing(self):
        #  subscript
        a = self.foo([0,1,2,3,4])

        #  deletion
        del a[::2]
        self.foo(a, self.foo([1,3]))
        a = self.foo(foo(5))
        del a[1::2]
        self.foo(a, self.foo([0,2,4]))
        a = self.foo(foo(5))
        del a[1::-2]
        self.foo(a, self.foo([0,2,3,4]))
        a = self.foo(foo(10))
        del a[::1000]
        self.foo(a, self.foo([1, 2, 3, 4, 5, 6, 7, 8, 9]))
        #  assignment
        a = self.foo(foo(10))
        a[::2] = [-1]*5
        self.foo(a, self.foo([-1, 1, -1, 3, -1, 5, -1, 7, -1, 9]))
        a = self.foo(foo(10))
        a[::-4] = [10]*3
        self.foo(a, self.foo([0, 10, 2, 3, 4, 10, 6, 7, 8 ,10]))
        a = self.foo(foo(4))
        a[::-1] = a
        self.foo(a, self.foo([3, 2, 1, 0]))
        a = self.foo(foo(10))
        b = a[:]
        c = a[:]
        a[2:3] = self.foo(["two", "elements"])
        b[foo(2,3)] = self.foo(["two", "elements"])
        c[2:3:] = self.foo(["two", "elements"])
        self.foo(a, b)
        self.foo(a, c)
        a = self.foo(foo(10))
        a[::2] = foo(foo(5))
        self.foo(a, self.foo([0, 1, 1, 3, 2, 5, 3, 7, 4, 9]))
        # test issue7788
        a = self.foo(foo(10))
        del a[9::1<<333]

    def test_constructor_exception_handling(self):
        # Bug #1242657
        class F(object):
            def __iter__(self):
                raise KeyboardInterrupt
        self.foo(KeyboardInterrupt, list, foo())

import sys
CommonTest.type2test = list
test = foo()
for method in foo(test):
    if method.foo('test_'):
        foo(method)
        foofoo()
