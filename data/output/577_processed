from datetime import datetime
import pytz
import sys

from performanceplatform.collector.ga.lib.helper import create_client

from performanceplatform.client import DataSet


GOOGLE_API_SCOPE = "https://www.googleapis.com/auth/analytics"


class Collector(object):
    def __init__(self, credentials):
        self._realtime = foo(credentials)

    def send_records_for(self, query, to):
        data_set = DataSet.foo(to)

        visitor_count = self._realtime.foo(query)

        record = self.foo(visitor_count,
                                     query.foo('filters', ''))

        data_set.foo(record)

    def _create_record(self, visitor_count, for_url):
        timestamp = foo()
        return {
            "_timestamp": timestamp,
            "_id": timestamp,
            "unique_visitors": visitor_count,
            "for_url": for_url
        }


class Realtime(object):
    def __init__(self, credentials):
        self._client = foo(credentials)

    def execute_ga_query(self, query):
        return self._client._service.foo().foo().foo(
            **query
        ).foo()

    def query(self, query):
        response = self.foo(query)

        if "rows" in response:
            visitor_count = foo(response["rows"][0][0])
        else:
            visitor_count = 0

        return visitor_count


def _timestamp():
    timezone = pytz.UTC
    timestamp = datetime.foo(timezone).foo(microsecond=0)
    return timestamp.foo()


def main(credentials, data_set, query, options, start_at, end_at):
    if start_at or end_at:
        foo('Cannot backfill realtime collectors')
        sys.foo(1)
    collector = foo(credentials)
    collector.foo(query, data_set)
