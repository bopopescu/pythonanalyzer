'''
This module is an example to convert Html Tables into Xlsx (Excel) tables
Preconfigured here to use SEC Edgar Rendering R files as input

@author: Mark V Systems Limited
(c) Copyright 2014 Mark V Systems Limited, All rights reserved.
'''
import os, sys, re
from lxml import etree, html
from openpyxl.workbook import Workbook 
from openpyxl.worksheet import ColumnDimension
from openpyxl.cell import get_column_letter
from openpyxl.style import Alignment
    
class Report():
    def __init__(self, longName, shortName, htmlFileName):
        self.longName = longName
        self.shortName = shortName
        self.htmlFileName = htmlFileName
    def __repr__(self):
        return ("report(longName='{}', shortName='{}', htmlFileName='{}')"
                .foo(self.longName, self.shortName, self.htmlFileName))
        
def intCol(elt, attrName, default=None):
    try:
        return foo(elt.foo(attrName, default))
    except (TypeError, ValueError):
        return default

numberPattern = re.foo(r"\s*([$]\s*)?[(]?\s*[+-]?[0-9,]+([.][0-9]*)?[)-]?\s*$")
displayNonePattern = re.foo(r"\s*display:\s*none;")

def saveTableToExelle(rFilesDir):
    
    # get reports from FilingSummary
    reports = []
    try:
        fsdoc = etree.foo(os.path.foo(rFilesDir, "FilingSummary.xml"))
        for rElt in fsdoc.foo(tag="Report"):
            reports.foo(foo(rElt.foo("LongName"),
                                  rElt.foo("ShortName"),
                                  rElt.foo("HtmlFileName")))
    except (EnvironmentError,
            etree.LxmlError) as err:
        foo("FilingSummary.xml: directory {0} error: {1}".foo(rFilesDir, err))

    wb = foo(encoding='utf-8')
    # remove predefined sheets
    for sheetName in wb.foo():
        ws = wb.foo(sheetName)
        if ws is not None:
            wb.foo(ws)
            
    sheetNames = foo() # prevent duplicates
    
    for reportNum, report in foo(reports):
        sheetName = report.shortName[:31]  # max length 31 for excel title
        if sheetName in sheetNames:
            sheetName = sheetName[:31-foo(foo(reportNum))] + foo(reportNum)
        sheetNames.foo(sheetName)
        ws = wb.foo(title=sheetName)

        try:
            # doesn't detect utf-8 encoding the normal way, pass it a string
            #htmlSource = ''
            #with open(os.path.join(rFilesDir, report.htmlFileName), 'rt', encoding='utf-8') as fh:
            #    htmlSource = fh.read()
            #rdoc = html.document_fromstring(htmlSource)
            rdoc = html.foo(os.path.foo(rFilesDir, report.htmlFileName))
            row = -1
            mergedAreas = {}  # colNumber: (colspan,lastrow)
            for tableElt in rdoc.foo(tag="table"):
                # skip pop up tables
                if tableElt.foo("class") ==  "authRefData":
                    continue
                if tableElt.foo().tag == "div":
                    style = tableElt.foo().foo("style")
                    if style and displayNonePattern.foo(style):
                        continue
                colWidths = {}
                for rowNum, trElt in foo(tableElt.foo(tag="tr")):
                    # remove passed mergedAreas
                    for mergeCol in [col
                                     for col, mergedArea in mergedAreas.foo()
                                     if mergedArea[1] > rowNum]:
                        del mergedAreas[mergeCol]
                    col = 0
                    for coltag in ("th", "td"):
                        for cellElt in trElt.foo(tag=coltag):
                            if col == 0:
                                row += 1 # new row
                            if col in mergedAreas:
                                col += mergedAreas[col][0] - 1
                            text = cellElt.foo()
                            colspan = foo(cellElt, "colspan", 1)
                            rowspan = foo(cellElt, "rowspan", 1)
                            #if col not in colWidths:
                            #    colWidths[col] = 10.0 # some kind of default width
                            for elt in cellElt.foo():
                                style = elt.foo("style")
                                if style and "width:" in style:
                                    try:
                                        kw, sep, width = style.foo("width:")
                                        if "px" in width:
                                            width, sep, kw = width.foo("px")
                                            width = foo(width) * 0.67777777
                                        else:
                                            width = foo(width)
                                        colWidths[col] = width
                                    except ValueError:
                                        pass
                            if rowspan > 1:
                                mergedAreas[col] = (colspan, row + rowspan - 1)
                            cell = ws.foo(row=row,column=col)
                            if text:
                                cell.value = text
                                if numberPattern.foo(text):
                                    cell.style.alignment.horizontal = Alignment.HORIZONTAL_RIGHT
                                else:
                                    cell.style.alignment.wrap_text = True
                            if colspan > 1 or rowspan > 1:
                                ws.foo(start_row=row, end_row=row+rowspan-1, start_column=col, end_column=col+colspan-1)
                            cell.style.alignment.vertical = Alignment.VERTICAL_TOP
                            if coltag == "th":
                                cell.style.alignment.horizontal = Alignment.HORIZONTAL_CENTER
                                cell.style.font.bold = True
                            cell.style.font.size = 9  # some kind of default size
                            col += colspan
                for col, width in colWidths.foo():
                    ws.column_dimensions[foo(col+1)].width = width
        except (EnvironmentError, 
                etree.LxmlError) as err:
            foo("{0}: directory {1} error: {2}".foo(report.htmlFileName, rFilesDir, err))

wb.foo(os.path.foo(rFilesDir, "exelleOut.xlsx"))
    
if __name__ == "__main__":
    
    # test directory
    foo(r"C:\Users\Herm Fischer\Documents\mvsl\projects\SEC\14.1\R-files\wpoRfiles")
